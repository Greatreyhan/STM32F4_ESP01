
STM32_ESP01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be0  08003be0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000006c  08003c54  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08003c54  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d81  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e0  00000000  00000000  00028e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0002a840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000056d  00000000  00000000  0002af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015905  00000000  00000000  0002b4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e61  00000000  00000000  00040dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e77  00000000  00000000  00049c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020b8  00000000  00000000  000cea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d0b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003560 	.word	0x08003560

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003560 	.word	0x08003560

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b098      	sub	sp, #96	; 0x60
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005b6:	f000 fa5f 	bl	8000a78 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005ba:	495d      	ldr	r1, [pc, #372]	; (8000730 <ESP_Init+0x184>)
 80005bc:	485d      	ldr	r0, [pc, #372]	; (8000734 <ESP_Init+0x188>)
 80005be:	f000 fc78 	bl	8000eb2 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80005c2:	495d      	ldr	r1, [pc, #372]	; (8000738 <ESP_Init+0x18c>)
 80005c4:	485d      	ldr	r0, [pc, #372]	; (800073c <ESP_Init+0x190>)
 80005c6:	f000 fc74 	bl	8000eb2 <Uart_sendstring>
	for (int i=0; i<5; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005ce:	e00a      	b.n	80005e6 <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 80005d0:	4959      	ldr	r1, [pc, #356]	; (8000738 <ESP_Init+0x18c>)
 80005d2:	485b      	ldr	r0, [pc, #364]	; (8000740 <ESP_Init+0x194>)
 80005d4:	f000 fc6d 	bl	8000eb2 <Uart_sendstring>
		HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f001 f91c 	bl	8001818 <HAL_Delay>
	for (int i=0; i<5; i++)
 80005e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005e2:	3301      	adds	r3, #1
 80005e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	ddf1      	ble.n	80005d0 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 80005ec:	4950      	ldr	r1, [pc, #320]	; (8000730 <ESP_Init+0x184>)
 80005ee:	4855      	ldr	r0, [pc, #340]	; (8000744 <ESP_Init+0x198>)
 80005f0:	f000 fc5f 	bl	8000eb2 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80005f4:	bf00      	nop
 80005f6:	494e      	ldr	r1, [pc, #312]	; (8000730 <ESP_Init+0x184>)
 80005f8:	4853      	ldr	r0, [pc, #332]	; (8000748 <ESP_Init+0x19c>)
 80005fa:	f000 fceb 	bl	8000fd4 <Wait_for>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f8      	beq.n	80005f6 <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 8000604:	494c      	ldr	r1, [pc, #304]	; (8000738 <ESP_Init+0x18c>)
 8000606:	4851      	ldr	r0, [pc, #324]	; (800074c <ESP_Init+0x1a0>)
 8000608:	f000 fc53 	bl	8000eb2 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 800060c:	4948      	ldr	r1, [pc, #288]	; (8000730 <ESP_Init+0x184>)
 800060e:	4850      	ldr	r0, [pc, #320]	; (8000750 <ESP_Init+0x1a4>)
 8000610:	f000 fc4f 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000614:	bf00      	nop
 8000616:	4946      	ldr	r1, [pc, #280]	; (8000730 <ESP_Init+0x184>)
 8000618:	484e      	ldr	r0, [pc, #312]	; (8000754 <ESP_Init+0x1a8>)
 800061a:	f000 fcdb 	bl	8000fd4 <Wait_for>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 8000624:	4944      	ldr	r1, [pc, #272]	; (8000738 <ESP_Init+0x18c>)
 8000626:	484c      	ldr	r0, [pc, #304]	; (8000758 <ESP_Init+0x1ac>)
 8000628:	f000 fc43 	bl	8000eb2 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 800062c:	4942      	ldr	r1, [pc, #264]	; (8000738 <ESP_Init+0x18c>)
 800062e:	484b      	ldr	r0, [pc, #300]	; (800075c <ESP_Init+0x1b0>)
 8000630:	f000 fc3f 	bl	8000eb2 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000634:	f107 0008 	add.w	r0, r7, #8
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	4948      	ldr	r1, [pc, #288]	; (8000760 <ESP_Init+0x1b4>)
 800063e:	f002 fadb 	bl	8002bf8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	493a      	ldr	r1, [pc, #232]	; (8000730 <ESP_Init+0x184>)
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fc32 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 800064e:	bf00      	nop
 8000650:	4937      	ldr	r1, [pc, #220]	; (8000730 <ESP_Init+0x184>)
 8000652:	4844      	ldr	r0, [pc, #272]	; (8000764 <ESP_Init+0x1b8>)
 8000654:	f000 fcbe 	bl	8000fd4 <Wait_for>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f8      	beq.n	8000650 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4940      	ldr	r1, [pc, #256]	; (8000768 <ESP_Init+0x1bc>)
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fac6 	bl	8002bf8 <siprintf>
	Uart_sendstring(data,pc_uart);
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	4931      	ldr	r1, [pc, #196]	; (8000738 <ESP_Init+0x18c>)
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fc1d 	bl	8000eb2 <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000678:	492d      	ldr	r1, [pc, #180]	; (8000730 <ESP_Init+0x184>)
 800067a:	483c      	ldr	r0, [pc, #240]	; (800076c <ESP_Init+0x1c0>)
 800067c:	f000 fc19 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8000680:	bf00      	nop
 8000682:	492b      	ldr	r1, [pc, #172]	; (8000730 <ESP_Init+0x184>)
 8000684:	483a      	ldr	r0, [pc, #232]	; (8000770 <ESP_Init+0x1c4>)
 8000686:	f000 fca5 	bl	8000fd4 <Wait_for>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f8      	beq.n	8000682 <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000690:	bf00      	nop
 8000692:	4a27      	ldr	r2, [pc, #156]	; (8000730 <ESP_Init+0x184>)
 8000694:	4937      	ldr	r1, [pc, #220]	; (8000774 <ESP_Init+0x1c8>)
 8000696:	4838      	ldr	r0, [pc, #224]	; (8000778 <ESP_Init+0x1cc>)
 8000698:	f000 fc22 	bl	8000ee0 <Copy_upto>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f7      	beq.n	8000692 <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80006a2:	bf00      	nop
 80006a4:	4922      	ldr	r1, [pc, #136]	; (8000730 <ESP_Init+0x184>)
 80006a6:	4835      	ldr	r0, [pc, #212]	; (800077c <ESP_Init+0x1d0>)
 80006a8:	f000 fc94 	bl	8000fd4 <Wait_for>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f8      	beq.n	80006a4 <ESP_Init+0xf8>
	int len = strlen (buffer);
 80006b2:	4830      	ldr	r0, [pc, #192]	; (8000774 <ESP_Init+0x1c8>)
 80006b4:	f7ff fd9e 	bl	80001f4 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80006bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <ESP_Init+0x1c8>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <ESP_Init+0x1c8>)
 80006cc:	492c      	ldr	r1, [pc, #176]	; (8000780 <ESP_Init+0x1d4>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fa92 	bl	8002bf8 <siprintf>
	Uart_sendstring(data, pc_uart);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4917      	ldr	r1, [pc, #92]	; (8000738 <ESP_Init+0x18c>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fbe9 	bl	8000eb2 <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80006e0:	4913      	ldr	r1, [pc, #76]	; (8000730 <ESP_Init+0x184>)
 80006e2:	4828      	ldr	r0, [pc, #160]	; (8000784 <ESP_Init+0x1d8>)
 80006e4:	f000 fbe5 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80006e8:	bf00      	nop
 80006ea:	4911      	ldr	r1, [pc, #68]	; (8000730 <ESP_Init+0x184>)
 80006ec:	4826      	ldr	r0, [pc, #152]	; (8000788 <ESP_Init+0x1dc>)
 80006ee:	f000 fc71 	bl	8000fd4 <Wait_for>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0f8      	beq.n	80006ea <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80006f8:	490f      	ldr	r1, [pc, #60]	; (8000738 <ESP_Init+0x18c>)
 80006fa:	4824      	ldr	r0, [pc, #144]	; (800078c <ESP_Init+0x1e0>)
 80006fc:	f000 fbd9 	bl	8000eb2 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 8000700:	490b      	ldr	r1, [pc, #44]	; (8000730 <ESP_Init+0x184>)
 8000702:	4823      	ldr	r0, [pc, #140]	; (8000790 <ESP_Init+0x1e4>)
 8000704:	f000 fbd5 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000708:	bf00      	nop
 800070a:	4909      	ldr	r1, [pc, #36]	; (8000730 <ESP_Init+0x184>)
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <ESP_Init+0x1d0>)
 800070e:	f000 fc61 	bl	8000fd4 <Wait_for>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f8      	beq.n	800070a <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <ESP_Init+0x18c>)
 800071a:	481e      	ldr	r0, [pc, #120]	; (8000794 <ESP_Init+0x1e8>)
 800071c:	f000 fbc9 	bl	8000eb2 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 8000720:	4905      	ldr	r1, [pc, #20]	; (8000738 <ESP_Init+0x18c>)
 8000722:	481d      	ldr	r0, [pc, #116]	; (8000798 <ESP_Init+0x1ec>)
 8000724:	f000 fbc5 	bl	8000eb2 <Uart_sendstring>

}
 8000728:	bf00      	nop
 800072a:	3760      	adds	r7, #96	; 0x60
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001cc 	.word	0x200001cc
 8000734:	0800397c 	.word	0x0800397c
 8000738:	20000214 	.word	0x20000214
 800073c:	08003988 	.word	0x08003988
 8000740:	08003994 	.word	0x08003994
 8000744:	08003998 	.word	0x08003998
 8000748:	080039a0 	.word	0x080039a0
 800074c:	080039ac 	.word	0x080039ac
 8000750:	080039b8 	.word	0x080039b8
 8000754:	080039c8 	.word	0x080039c8
 8000758:	080039e0 	.word	0x080039e0
 800075c:	080039f0 	.word	0x080039f0
 8000760:	08003a14 	.word	0x08003a14
 8000764:	08003a2c 	.word	0x08003a2c
 8000768:	08003a40 	.word	0x08003a40
 800076c:	08003a54 	.word	0x08003a54
 8000770:	08003a60 	.word	0x08003a60
 8000774:	20000088 	.word	0x20000088
 8000778:	08003a70 	.word	0x08003a70
 800077c:	08003a74 	.word	0x08003a74
 8000780:	08003a7c 	.word	0x08003a7c
 8000784:	08003a8c 	.word	0x08003a8c
 8000788:	08003a9c 	.word	0x08003a9c
 800078c:	08003ab4 	.word	0x08003ab4
 8000790:	08003ac4 	.word	0x08003ac4
 8000794:	08003ad8 	.word	0x08003ad8
 8000798:	08003aec 	.word	0x08003aec

0800079c <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b098      	sub	sp, #96	; 0x60
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fd24 	bl	80001f4 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007b0:	f107 000c 	add.w	r0, r7, #12
 80007b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	491a      	ldr	r1, [pc, #104]	; (8000824 <Server_Send+0x88>)
 80007ba:	f002 fa1d 	bl	8002bf8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4919      	ldr	r1, [pc, #100]	; (8000828 <Server_Send+0x8c>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fb74 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80007ca:	bf00      	nop
 80007cc:	4916      	ldr	r1, [pc, #88]	; (8000828 <Server_Send+0x8c>)
 80007ce:	4817      	ldr	r0, [pc, #92]	; (800082c <Server_Send+0x90>)
 80007d0:	f000 fc00 	bl	8000fd4 <Wait_for>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f8      	beq.n	80007cc <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 80007da:	4913      	ldr	r1, [pc, #76]	; (8000828 <Server_Send+0x8c>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 fb68 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80007e2:	bf00      	nop
 80007e4:	4910      	ldr	r1, [pc, #64]	; (8000828 <Server_Send+0x8c>)
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <Server_Send+0x94>)
 80007e8:	f000 fbf4 	bl	8000fd4 <Wait_for>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f8      	beq.n	80007e4 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	490f      	ldr	r1, [pc, #60]	; (8000834 <Server_Send+0x98>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 f9fd 	bl	8002bf8 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4909      	ldr	r1, [pc, #36]	; (8000828 <Server_Send+0x8c>)
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fb54 	bl	8000eb2 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800080a:	bf00      	nop
 800080c:	4906      	ldr	r1, [pc, #24]	; (8000828 <Server_Send+0x8c>)
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <Server_Send+0x9c>)
 8000810:	f000 fbe0 	bl	8000fd4 <Wait_for>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f8      	beq.n	800080c <Server_Send+0x70>
	return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3760      	adds	r7, #96	; 0x60
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	08003b0c 	.word	0x08003b0c
 8000828:	200001cc 	.word	0x200001cc
 800082c:	08003b20 	.word	0x08003b20
 8000830:	08003b24 	.word	0x08003b24
 8000834:	08003b2c 	.word	0x08003b2c
 8000838:	08003a74 	.word	0x08003a74

0800083c <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000842:	af00      	add	r7, sp, #0
 8000844:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000848:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000852:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000856:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000858:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800085c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f002 f9e3 	bl	8002c38 <memset>
	if (!(strcmp (str, "/ledon")))
 8000872:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000876:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800087a:	493f      	ldr	r1, [pc, #252]	; (8000978 <Server_Handle+0x13c>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	f7ff fcaf 	bl	80001e0 <strcmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d122      	bne.n	80008ce <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 8000888:	4b3c      	ldr	r3, [pc, #240]	; (800097c <Server_Handle+0x140>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f9b0 	bl	8002bf8 <siprintf>
		strcat(datatosend, LED_ON);
 8000898:	4b39      	ldr	r3, [pc, #228]	; (8000980 <Server_Handle+0x144>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 f9d0 	bl	8002c48 <strcat>
		strcat(datatosend, Terminate);
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <Server_Handle+0x148>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f9c8 	bl	8002c48 <strcat>
		Server_Send(datatosend, Link_ID);
 80008b8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008bc:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80008c0:	f107 0208 	add.w	r2, r7, #8
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	4610      	mov	r0, r2
 80008c8:	f7ff ff68 	bl	800079c <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 80008cc:	e04f      	b.n	800096e <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 80008ce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008d2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80008d6:	492c      	ldr	r1, [pc, #176]	; (8000988 <Server_Handle+0x14c>)
 80008d8:	6818      	ldr	r0, [r3, #0]
 80008da:	f7ff fc81 	bl	80001e0 <strcmp>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d122      	bne.n	800092a <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <Server_Handle+0x140>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f982 	bl	8002bf8 <siprintf>
		strcat(datatosend, LED_OFF);
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <Server_Handle+0x150>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 f9a2 	bl	8002c48 <strcat>
		strcat(datatosend, Terminate);
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <Server_Handle+0x148>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f99a 	bl	8002c48 <strcat>
		Server_Send(datatosend, Link_ID);
 8000914:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000918:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800091c:	f107 0208 	add.w	r2, r7, #8
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	4610      	mov	r0, r2
 8000924:	f7ff ff3a 	bl	800079c <Server_Send>
}
 8000928:	e021      	b.n	800096e <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <Server_Handle+0x140>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f002 f95f 	bl	8002bf8 <siprintf>
		strcat(datatosend, LED_OFF);
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <Server_Handle+0x150>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f002 f97f 	bl	8002c48 <strcat>
		strcat(datatosend, Terminate);
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <Server_Handle+0x148>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f977 	bl	8002c48 <strcat>
		Server_Send(datatosend, Link_ID);
 800095a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800095e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000962:	f107 0208 	add.w	r2, r7, #8
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	4610      	mov	r0, r2
 800096a:	f7ff ff17 	bl	800079c <Server_Send>
}
 800096e:	bf00      	nop
 8000970:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08003b3c 	.word	0x08003b3c
 800097c:	20000000 	.word	0x20000000
 8000980:	20000004 	.word	0x20000004
 8000984:	2000000c 	.word	0x2000000c
 8000988:	08003b44 	.word	0x08003b44
 800098c:	20000008 	.word	0x20000008

08000990 <Server_Start>:

void Server_Start (void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b092      	sub	sp, #72	; 0x48
 8000994:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	223c      	movs	r2, #60	; 0x3c
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 f948 	bl	8002c38 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80009a8:	bf00      	nop
 80009aa:	1dfa      	adds	r2, r7, #7
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <Server_Start+0xc8>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	482a      	ldr	r0, [pc, #168]	; (8000a5c <Server_Start+0xcc>)
 80009b2:	f000 fa4f 	bl	8000e54 <Get_after>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f6      	beq.n	80009aa <Server_Start+0x1a>
	Link_ID -= 48;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	3b30      	subs	r3, #48	; 0x30
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80009c4:	bf00      	nop
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <Server_Start+0xc8>)
 80009cc:	4619      	mov	r1, r3
 80009ce:	4824      	ldr	r0, [pc, #144]	; (8000a60 <Server_Start+0xd0>)
 80009d0:	f000 fa86 	bl	8000ee0 <Copy_upto>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f5      	beq.n	80009c6 <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <Server_Start+0xd4>)
 80009e2:	f000 f8b0 	bl	8000b46 <Look_for>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10a      	bne.n	8000a02 <Server_Start+0x72>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	481d      	ldr	r0, [pc, #116]	; (8000a68 <Server_Start+0xd8>)
 80009f2:	f001 f9cb 	bl	8001d8c <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4619      	mov	r1, r3
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <Server_Start+0xd4>)
 80009fc:	f7ff ff1e 	bl	800083c <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 8000a00:	e026      	b.n	8000a50 <Server_Start+0xc0>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	; (8000a6c <Server_Start+0xdc>)
 8000a0a:	f000 f89c 	bl	8000b46 <Look_for>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10a      	bne.n	8000a2a <Server_Start+0x9a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2120      	movs	r1, #32
 8000a18:	4813      	ldr	r0, [pc, #76]	; (8000a68 <Server_Start+0xd8>)
 8000a1a:	f001 f9b7 	bl	8001d8c <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <Server_Start+0xdc>)
 8000a24:	f7ff ff0a 	bl	800083c <Server_Handle>
}
 8000a28:	e012      	b.n	8000a50 <Server_Start+0xc0>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <Server_Start+0xe0>)
 8000a32:	f000 f888 	bl	8000b46 <Look_for>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d009      	beq.n	8000a50 <Server_Start+0xc0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2120      	movs	r1, #32
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <Server_Start+0xd8>)
 8000a42:	f001 f9a3 	bl	8001d8c <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480a      	ldr	r0, [pc, #40]	; (8000a74 <Server_Start+0xe4>)
 8000a4c:	f7ff fef6 	bl	800083c <Server_Handle>
}
 8000a50:	bf00      	nop
 8000a52:	3748      	adds	r7, #72	; 0x48
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200001cc 	.word	0x200001cc
 8000a5c:	08003b4c 	.word	0x08003b4c
 8000a60:	08003b54 	.word	0x08003b54
 8000a64:	08003b3c 	.word	0x08003b3c
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	08003b44 	.word	0x08003b44
 8000a70:	08003b60 	.word	0x08003b60
 8000a74:	08003b70 	.word	0x08003b70

08000a78 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <Ringbuf_init+0x68>)
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <Ringbuf_init+0x6c>)
 8000a80:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <Ringbuf_init+0x70>)
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <Ringbuf_init+0x74>)
 8000a86:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <Ringbuf_init+0x78>)
 8000a8a:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <Ringbuf_init+0x7c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <Ringbuf_init+0x80>)
 8000a90:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <Ringbuf_init+0x84>)
 8000a92:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <Ringbuf_init+0x88>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <Ringbuf_init+0x88>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <Ringbuf_init+0x8c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <Ringbuf_init+0x8c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0201 	orr.w	r2, r2, #1
 8000ab2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <Ringbuf_init+0x88>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <Ringbuf_init+0x88>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0220 	orr.w	r2, r2, #32
 8000ac2:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <Ringbuf_init+0x8c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	68da      	ldr	r2, [r3, #12]
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <Ringbuf_init+0x8c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 0220 	orr.w	r2, r2, #32
 8000ad2:	60da      	str	r2, [r3, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200001bc 	.word	0x200001bc
 8000ae4:	2000009c 	.word	0x2000009c
 8000ae8:	200001c0 	.word	0x200001c0
 8000aec:	200000e4 	.word	0x200000e4
 8000af0:	200001c4 	.word	0x200001c4
 8000af4:	2000012c 	.word	0x2000012c
 8000af8:	200001c8 	.word	0x200001c8
 8000afc:	20000174 	.word	0x20000174
 8000b00:	200001cc 	.word	0x200001cc
 8000b04:	20000214 	.word	0x20000214

08000b08 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b1e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d007      	beq.n	8000b3a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	79f9      	ldrb	r1, [r7, #7]
 8000b32:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fb4f 	bl	80001f4 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f7ff fb4a 	bl	80001f4 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000b6c:	e002      	b.n	8000b74 <Look_for+0x2e>
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	3301      	adds	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	440b      	add	r3, r1
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d1f2      	bne.n	8000b6e <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	6839      	ldr	r1, [r7, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d111      	bne.n	8000bc0 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000b9c:	e005      	b.n	8000baa <Look_for+0x64>
	{
		so_far++;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
		indx++;
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	6839      	ldr	r1, [r7, #0]
 8000bb6:	440b      	add	r3, r1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d0ef      	beq.n	8000b9e <Look_for+0x58>
 8000bbe:	e008      	b.n	8000bd2 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbcf      	blt.n	8000b6c <Look_for+0x26>
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd0:	e007      	b.n	8000be2 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d101      	bne.n	8000bde <Look_for+0x98>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e001      	b.n	8000be2 <Look_for+0x9c>
	else return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <Uart_peek+0x70>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d111      	bne.n	8000c20 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <Uart_peek+0x74>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <Uart_peek+0x74>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d102      	bne.n	8000c12 <Uart_peek+0x26>
		  {
		    return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c10:	e01e      	b.n	8000c50 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <Uart_peek+0x74>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <Uart_peek+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	e017      	b.n	8000c50 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <Uart_peek+0x78>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d111      	bne.n	8000c4c <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <Uart_peek+0x7c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <Uart_peek+0x7c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d102      	bne.n	8000c3e <Uart_peek+0x52>
		  {
		    return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3c:	e008      	b.n	8000c50 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <Uart_peek+0x7c>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <Uart_peek+0x7c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	e001      	b.n	8000c50 <Uart_peek+0x64>
		  }
	}

	return -1;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	200001cc 	.word	0x200001cc
 8000c60:	200001bc 	.word	0x200001bc
 8000c64:	20000214 	.word	0x20000214
 8000c68:	200001c4 	.word	0x200001c4

08000c6c <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <Uart_read+0x9c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d11c      	bne.n	8000cb6 <Uart_read+0x4a>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <Uart_read+0xa0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <Uart_read+0xa0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d102      	bne.n	8000c92 <Uart_read+0x26>
		  {
		    return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c90:	e034      	b.n	8000cfc <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <Uart_read+0xa0>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <Uart_read+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <Uart_read+0xa0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <Uart_read+0xa0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cb0:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	e022      	b.n	8000cfc <Uart_read+0x90>
		  }
	}

	else if (uart == pc_uart)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <Uart_read+0xa4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d11c      	bne.n	8000cf8 <Uart_read+0x8c>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <Uart_read+0xa8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <Uart_read+0xa8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d102      	bne.n	8000cd4 <Uart_read+0x68>
		  {
		    return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd2:	e013      	b.n	8000cfc <Uart_read+0x90>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <Uart_read+0xa8>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <Uart_read+0xa8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <Uart_read+0xa8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <Uart_read+0xa8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cf2:	645a      	str	r2, [r3, #68]	; 0x44
		    return c;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	e001      	b.n	8000cfc <Uart_read+0x90>
		  }
	}

	else return -1;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200001cc 	.word	0x200001cc
 8000d0c:	200001bc 	.word	0x200001bc
 8000d10:	20000214 	.word	0x20000214
 8000d14:	200001c4 	.word	0x200001c4

08000d18 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db4c      	blt.n	8000dc2 <Uart_write+0xaa>
	{
		if (uart == device_uart){
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <Uart_write+0xb8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d122      	bne.n	8000d76 <Uart_write+0x5e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <Uart_write+0xbc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	3301      	adds	r3, #1
 8000d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d3c:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000d3e:	bf00      	nop
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <Uart_write+0xbc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d0f9      	beq.n	8000d40 <Uart_write+0x28>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <Uart_write+0xbc>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <Uart_write+0xbc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	b2c9      	uxtb	r1, r1
 8000d5a:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <Uart_write+0xbc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <Uart_write+0xb8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <Uart_write+0xb8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d72:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000d74:	e025      	b.n	8000dc2 <Uart_write+0xaa>
		else if (uart == pc_uart){
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <Uart_write+0xc0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d121      	bne.n	8000dc2 <Uart_write+0xaa>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <Uart_write+0xc4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	3301      	adds	r3, #1
 8000d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d8a:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000d8c:	bf00      	nop
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <Uart_write+0xc4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d0f9      	beq.n	8000d8e <Uart_write+0x76>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <Uart_write+0xc4>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <Uart_write+0xc4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	b2c9      	uxtb	r1, r1
 8000da8:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <Uart_write+0xc4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <Uart_write+0xc0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <Uart_write+0xc0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dc0:	60da      	str	r2, [r3, #12]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200001cc 	.word	0x200001cc
 8000dd4:	200001c0 	.word	0x200001c0
 8000dd8:	20000214 	.word	0x20000214
 8000ddc:	200001c8 	.word	0x200001c8

08000de0 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <IsDataAvailable+0x64>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10e      	bne.n	8000e0e <IsDataAvailable+0x2e>
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <IsDataAvailable+0x68>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <IsDataAvailable+0x68>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3340      	adds	r3, #64	; 0x40
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e0c:	e014      	b.n	8000e38 <IsDataAvailable+0x58>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <IsDataAvailable+0x6c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10e      	bne.n	8000e34 <IsDataAvailable+0x54>
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <IsDataAvailable+0x70>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <IsDataAvailable+0x70>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	3340      	adds	r3, #64	; 0x40
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e32:	e001      	b.n	8000e38 <IsDataAvailable+0x58>
	return -1;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	200001cc 	.word	0x200001cc
 8000e48:	200001bc 	.word	0x200001bc
 8000e4c:	20000214 	.word	0x20000214
 8000e50:	200001c4 	.word	0x200001c4

08000e54 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	460b      	mov	r3, r1
 8000e62:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000e64:	bf00      	nop
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f000 f8b3 	bl	8000fd4 <Wait_for>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d1f8      	bne.n	8000e66 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e012      	b.n	8000ea0 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000e7a:	bf00      	nop
 8000e7c:	6838      	ldr	r0, [r7, #0]
 8000e7e:	f7ff ffaf 	bl	8000de0 <IsDataAvailable>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f9      	beq.n	8000e7c <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f7ff feef 	bl	8000c6c <Uart_read>
 8000e8e:	4601      	mov	r1, r0
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbe8      	blt.n	8000e7a <Get_after+0x26>
	}
	return 1;
 8000ea8:	2301      	movs	r3, #1
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000ebc:	e007      	b.n	8000ece <Uart_sendstring+0x1c>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff25 	bl	8000d18 <Uart_write>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f3      	bne.n	8000ebe <Uart_sendstring+0xc>
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff f97f 	bl	80001f4 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000efe:	bf00      	nop
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff6d 	bl	8000de0 <IsDataAvailable>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f9      	beq.n	8000f00 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000f0c:	e01c      	b.n	8000f48 <Copy_upto+0x68>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <Copy_upto+0xf0>)
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <Copy_upto+0xf0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	4403      	add	r3, r0
 8000f1e:	5c8a      	ldrb	r2, [r1, r2]
 8000f20:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <Copy_upto+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <Copy_upto+0xf0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000f3a:	bf00      	nop
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff4f 	bl	8000de0 <IsDataAvailable>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f9      	beq.n	8000f3c <Copy_upto+0x5c>
	while (Uart_peek(uart) != string[so_far])
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fe4f 	bl	8000bec <Uart_peek>
 8000f4e:	4601      	mov	r1, r0
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d1d8      	bne.n	8000f0e <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000f5c:	e01b      	b.n	8000f96 <Copy_upto+0xb6>
	{
		so_far++;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fe81 	bl	8000c6c <Uart_read>
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	61ba      	str	r2, [r7, #24]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2ca      	uxtb	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d101      	bne.n	8000f88 <Copy_upto+0xa8>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e01f      	b.n	8000fc8 <Copy_upto+0xe8>
		while (!IsDataAvailable(uart));
 8000f88:	bf00      	nop
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff28 	bl	8000de0 <IsDataAvailable>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <Copy_upto+0xaa>
	while (Uart_peek(uart) == string [so_far])
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fe28 	bl	8000bec <Uart_peek>
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	d0d9      	beq.n	8000f5e <Copy_upto+0x7e>
	}

	if (so_far != len)
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d002      	beq.n	8000fb8 <Copy_upto+0xd8>
	{
		so_far = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
		goto again;
 8000fb6:	e7a2      	b.n	8000efe <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d101      	bne.n	8000fc4 <Copy_upto+0xe4>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e001      	b.n	8000fc8 <Copy_upto+0xe8>
	else return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200001bc 	.word	0x200001bc

08000fd4 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f906 	bl	80001f4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8000fec:	bf00      	nop
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f7ff fef6 	bl	8000de0 <IsDataAvailable>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f9      	beq.n	8000fee <Wait_for+0x1a>
	if (uart == device_uart)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <Wait_for+0xec>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d114      	bne.n	800102c <Wait_for+0x58>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001002:	e008      	b.n	8001016 <Wait_for+0x42>
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <Wait_for+0xf0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <Wait_for+0xf0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001014:	645a      	str	r2, [r3, #68]	; 0x44
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	f7ff fde8 	bl	8000bec <Uart_peek>
 800101c:	4601      	mov	r1, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4299      	cmp	r1, r3
 8001028:	d1ec      	bne.n	8001004 <Wait_for+0x30>
 800102a:	e02b      	b.n	8001084 <Wait_for+0xb0>
	else if (uart == pc_uart)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <Wait_for+0xf4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d127      	bne.n	8001084 <Wait_for+0xb0>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001034:	e008      	b.n	8001048 <Wait_for+0x74>
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <Wait_for+0xf8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <Wait_for+0xf8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f7ff fdcf 	bl	8000bec <Uart_peek>
 800104e:	4601      	mov	r1, r0
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4299      	cmp	r1, r3
 800105a:	d1ec      	bne.n	8001036 <Wait_for+0x62>
	while (Uart_peek(uart) == string [so_far])
 800105c:	e012      	b.n	8001084 <Wait_for+0xb0>
	{
		so_far++;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f7ff fe01 	bl	8000c6c <Uart_read>
		if (so_far == len) return 1;
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	429a      	cmp	r2, r3
 8001070:	d101      	bne.n	8001076 <Wait_for+0xa2>
 8001072:	2301      	movs	r3, #1
 8001074:	e01f      	b.n	80010b6 <Wait_for+0xe2>
		while (!IsDataAvailable(uart));
 8001076:	bf00      	nop
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff feb1 	bl	8000de0 <IsDataAvailable>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f9      	beq.n	8001078 <Wait_for+0xa4>
	while (Uart_peek(uart) == string [so_far])
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f7ff fdb1 	bl	8000bec <Uart_peek>
 800108a:	4601      	mov	r1, r0
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4299      	cmp	r1, r3
 8001096:	d0e2      	beq.n	800105e <Wait_for+0x8a>
	}

	if (so_far != len)
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	429a      	cmp	r2, r3
 800109e:	d002      	beq.n	80010a6 <Wait_for+0xd2>
	{
		so_far = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
		goto again;
 80010a4:	e7a2      	b.n	8000fec <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d101      	bne.n	80010b2 <Wait_for+0xde>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e001      	b.n	80010b6 <Wait_for+0xe2>
	else return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001cc 	.word	0x200001cc
 80010c4:	200001bc 	.word	0x200001bc
 80010c8:	20000214 	.word	0x20000214
 80010cc:	200001c4 	.word	0x200001c4

080010d0 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d023      	beq.n	800113a <Uart_isr+0x6a>
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01e      	beq.n	800113a <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <Uart_isr+0x128>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d107      	bne.n	8001122 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <Uart_isr+0x12c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcf4 	bl	8000b08 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001120:	e063      	b.n	80011ea <Uart_isr+0x11a>
        else if (huart == pc_uart)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a36      	ldr	r2, [pc, #216]	; (8001200 <Uart_isr+0x130>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d15f      	bne.n	80011ea <Uart_isr+0x11a>
           	store_char (c, _rx_buffer2);  // store data in buffer
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <Uart_isr+0x134>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fce8 	bl	8000b08 <store_char>
        return;
 8001138:	e057      	b.n	80011ea <Uart_isr+0x11a>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001140:	2b00      	cmp	r3, #0
 8001142:	d055      	beq.n	80011f0 <Uart_isr+0x120>
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	2b00      	cmp	r3, #0
 800114c:	d050      	beq.n	80011f0 <Uart_isr+0x120>
    {
    	if (huart == device_uart){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <Uart_isr+0x128>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d122      	bne.n	800119c <Uart_isr+0xcc>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <Uart_isr+0x138>)
 8001158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <Uart_isr+0x138>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	429a      	cmp	r2, r3
 8001160:	d108      	bne.n	8001174 <Uart_isr+0xa4>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001170:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8001172:	e03c      	b.n	80011ee <Uart_isr+0x11e>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <Uart_isr+0x138>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	4a23      	ldr	r2, [pc, #140]	; (8001208 <Uart_isr+0x138>)
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <Uart_isr+0x138>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	3301      	adds	r3, #1
 8001184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001188:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <Uart_isr+0x138>)
 800118a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	7b7a      	ldrb	r2, [r7, #13]
 8001198:	605a      	str	r2, [r3, #4]
    	return;
 800119a:	e028      	b.n	80011ee <Uart_isr+0x11e>
    	else if (huart == pc_uart){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <Uart_isr+0x130>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d124      	bne.n	80011ee <Uart_isr+0x11e>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <Uart_isr+0x13c>)
 80011a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <Uart_isr+0x13c>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d108      	bne.n	80011c2 <Uart_isr+0xf2>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011be:	60da      	str	r2, [r3, #12]
    	return;
 80011c0:	e015      	b.n	80011ee <Uart_isr+0x11e>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <Uart_isr+0x13c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <Uart_isr+0x13c>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <Uart_isr+0x13c>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	3301      	adds	r3, #1
 80011d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <Uart_isr+0x13c>)
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
        	      huart->Instance->SR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	7bba      	ldrb	r2, [r7, #14]
 80011e6:	605a      	str	r2, [r3, #4]
    	return;
 80011e8:	e001      	b.n	80011ee <Uart_isr+0x11e>
        return;
 80011ea:	bf00      	nop
 80011ec:	e000      	b.n	80011f0 <Uart_isr+0x120>
    	return;
 80011ee:	bf00      	nop
    }
}
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001cc 	.word	0x200001cc
 80011fc:	200001bc 	.word	0x200001bc
 8001200:	20000214 	.word	0x20000214
 8001204:	200001c4 	.word	0x200001c4
 8001208:	200000e4 	.word	0x200000e4
 800120c:	20000174 	.word	0x20000174

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001214:	f000 fa8e 	bl	8001734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001218:	f000 f812 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121c:	f000 f8ce 	bl	80013bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001220:	f000 f878 	bl	8001314 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001224:	f000 f8a0 	bl	8001368 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("infinergy", "okeokeoke");
 8001228:	4903      	ldr	r1, [pc, #12]	; (8001238 <main+0x28>)
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <main+0x2c>)
 800122c:	f7ff f9be 	bl	80005ac <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Server_Start();
 8001230:	f7ff fbae 	bl	8000990 <Server_Start>
 8001234:	e7fc      	b.n	8001230 <main+0x20>
 8001236:	bf00      	nop
 8001238:	08003b74 	.word	0x08003b74
 800123c:	08003b80 	.word	0x08003b80

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	2230      	movs	r2, #48	; 0x30
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fcf2 	bl	8002c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <SystemClock_Config+0xcc>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <SystemClock_Config+0xcc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800128c:	4a20      	ldr	r2, [pc, #128]	; (8001310 <SystemClock_Config+0xd0>)
 800128e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a8:	2310      	movs	r3, #16
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ac:	2302      	movs	r3, #2
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012b8:	2354      	movs	r3, #84	; 0x54
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fd79 	bl	8001dc0 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d4:	f000 f8c4 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 ffdb 	bl	80022b0 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001300:	f000 f8ae 	bl	8001460 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3750      	adds	r7, #80	; 0x50
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART1_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART1_UART_Init+0x4c>)
 800134c:	f001 f990 	bl	8002670 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f883 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001cc 	.word	0x200001cc
 8001364:	40011000 	.word	0x40011000

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f001 f966 	bl	8002670 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f859 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000214 	.word	0x20000214
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_GPIO_Init+0x9c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <MX_GPIO_Init+0x9c>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_GPIO_Init+0x9c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_GPIO_Init+0x9c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <MX_GPIO_Init+0x9c>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_GPIO_Init+0x9c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_GPIO_Init+0x9c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <MX_GPIO_Init+0x9c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_GPIO_Init+0x9c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <MX_GPIO_Init+0xa0>)
 800142e:	f000 fcad 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_GPIO_Init+0xa0>)
 800144c:	f000 fb1a 	bl	8001a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40020800 	.word	0x40020800

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3a      	ldr	r2, [pc, #232]	; (80015c4 <HAL_UART_MspInit+0x108>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d135      	bne.n	800154a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a31      	ldr	r2, [pc, #196]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001516:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001528:	2307      	movs	r3, #7
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <HAL_UART_MspInit+0x110>)
 8001534:	f000 faa6 	bl	8001a84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	2025      	movs	r0, #37	; 0x25
 800153e:	f000 fa6a 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001542:	2025      	movs	r0, #37	; 0x25
 8001544:	f000 fa83 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001548:	e038      	b.n	80015bc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <HAL_UART_MspInit+0x114>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d133      	bne.n	80015bc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 800155e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6313      	str	r3, [r2, #48]	; 0x30
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_UART_MspInit+0x10c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158c:	230c      	movs	r3, #12
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159c:	2307      	movs	r3, #7
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <HAL_UART_MspInit+0x110>)
 80015a8:	f000 fa6c 	bl	8001a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2026      	movs	r0, #38	; 0x26
 80015b2:	f000 fa30 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b6:	2026      	movs	r0, #38	; 0x26
 80015b8:	f000 fa49 	bl	8001a4e <HAL_NVIC_EnableIRQ>
}
 80015bc:	bf00      	nop
 80015be:	3730      	adds	r7, #48	; 0x30
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40004400 	.word	0x40004400

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f8da 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_isr(&huart1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <USART1_IRQHandler+0x10>)
 800162e:	f7ff fd4f 	bl	80010d0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200001cc 	.word	0x200001cc

0800163c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  Uart_isr(&huart2);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <USART2_IRQHandler+0x10>)
 8001642:	f7ff fd45 	bl	80010d0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000214 	.word	0x20000214

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f001 faf2 	bl	8002c68 <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20010000 	.word	0x20010000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	2000025c 	.word	0x2000025c
 80016b8:	200003b0 	.word	0x200003b0

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016e4:	f7ff ffea 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ea:	490d      	ldr	r1, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170e:	f001 fab1 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001712:	f7ff fd7d 	bl	8001210 <main>
  bx  lr    
 8001716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001724:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8001728:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800172c:	200003ac 	.word	0x200003ac

08001730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_Init+0x40>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_Init+0x40>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_Init+0x40>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f94f 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	200f      	movs	r0, #15
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fe80 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f967 	bl	8001a6a <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b4:	f000 f92f 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000010 	.word	0x20000010
 80017d0:	20000018 	.word	0x20000018
 80017d4:	20000014 	.word	0x20000014

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000018 	.word	0x20000018
 80017fc:	20000260 	.word	0x20000260

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000260 	.word	0x20000260

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000018 	.word	0x20000018

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e159      	b.n	8001d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8148 	bne.w	8001d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a2 	beq.w	8001d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x202>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x1fe>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x1f6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a45      	ldr	r2, [pc, #276]	; (8001d84 <HAL_GPIO_Init+0x300>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x1f2>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cca:	4a2f      	ldr	r2, [pc, #188]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf4:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f aea2 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da8:	e003      	b.n	8001db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e267      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d075      	beq.n	8001eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d00c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dea:	4b85      	ldr	r3, [pc, #532]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d112      	bne.n	8001e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b82      	ldr	r3, [pc, #520]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	4b7e      	ldr	r3, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d05b      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x108>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d157      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e242      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d106      	bne.n	8001e34 <HAL_RCC_OscConfig+0x74>
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a75      	ldr	r2, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xb0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x98>
 8001e3e:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6f      	ldr	r2, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xb0>
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a68      	ldr	r2, [pc, #416]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a65      	ldr	r2, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fcc2 	bl	8001800 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff fcbe 	bl	8001800 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e207      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xc0>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fcae 	bl	8001800 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fcaa 	bl	8001800 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1f3      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xe8>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x152>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1c7      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7ff fc63 	bl	8001800 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fc5f 	bl	8001800 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1a8      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4925      	ldr	r1, [pc, #148]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_OscConfig+0x244>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff fc42 	bl	8001800 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff fc3e 	bl	8001800 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e187      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d036      	beq.n	8002018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_RCC_OscConfig+0x248>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fc22 	bl	8001800 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fc1e 	bl	8001800 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e167      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x200>
 8001fde:	e01b      	b.n	8002018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_OscConfig+0x248>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fc0b 	bl	8001800 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	e00e      	b.n	800200c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff fc07 	bl	8001800 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d907      	bls.n	800200c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e150      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
 8002000:	40023800 	.word	0x40023800
 8002004:	42470000 	.word	0x42470000
 8002008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b88      	ldr	r3, [pc, #544]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ea      	bne.n	8001fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8097 	beq.w	8002154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b81      	ldr	r3, [pc, #516]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b7d      	ldr	r3, [pc, #500]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a7c      	ldr	r2, [pc, #496]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b77      	ldr	r3, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x474>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b74      	ldr	r3, [pc, #464]	; (8002234 <HAL_RCC_OscConfig+0x474>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a73      	ldr	r2, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x474>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7ff fbc7 	bl	8001800 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7ff fbc3 	bl	8001800 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e10c      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x474>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x2ea>
 800209c:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	e01c      	b.n	80020e4 <HAL_RCC_OscConfig+0x324>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x30c>
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a5e      	ldr	r2, [pc, #376]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a5b      	ldr	r2, [pc, #364]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0x324>
 80020cc:	4b58      	ldr	r3, [pc, #352]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a57      	ldr	r2, [pc, #348]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	4b55      	ldr	r3, [pc, #340]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a54      	ldr	r2, [pc, #336]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 0304 	bic.w	r3, r3, #4
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d015      	beq.n	8002118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff fb88 	bl	8001800 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7ff fb84 	bl	8001800 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0cb      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0ee      	beq.n	80020f4 <HAL_RCC_OscConfig+0x334>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7ff fb72 	bl	8001800 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7ff fb6e 	bl	8001800 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0b5      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1ee      	bne.n	8002120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002148:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 800214e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a1 	beq.w	80022a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800215e:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b08      	cmp	r3, #8
 8002168:	d05c      	beq.n	8002224 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d141      	bne.n	80021f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_OscConfig+0x478>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fb42 	bl	8001800 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff fb3e 	bl	8001800 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e087      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	019b      	lsls	r3, r3, #6
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	491b      	ldr	r1, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_OscConfig+0x478>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fb17 	bl	8001800 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff fb13 	bl	8001800 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e05c      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x416>
 80021f4:	e054      	b.n	80022a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_OscConfig+0x478>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fb00 	bl	8001800 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff fafc 	bl	8001800 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e045      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_OscConfig+0x470>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x444>
 8002222:	e03d      	b.n	80022a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d107      	bne.n	800223c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e038      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
 8002230:	40023800 	.word	0x40023800
 8002234:	40007000 	.word	0x40007000
 8002238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_OscConfig+0x4ec>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d028      	beq.n	800229c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d121      	bne.n	800229c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d11a      	bne.n	800229c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002274:	4293      	cmp	r3, r2
 8002276:	d111      	bne.n	800229c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	3b01      	subs	r3, #1
 8002286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0cc      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d90c      	bls.n	80022ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d044      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d119      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d003      	beq.n	800236e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e067      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4934      	ldr	r1, [pc, #208]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7ff fa2e 	bl	8001800 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7ff fa2a 	bl	8001800 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e04f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d20c      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f821 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f98e 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00
 800246c:	40023800 	.word	0x40023800
 8002470:	08003b8c 	.word	0x08003b8c
 8002474:	20000010 	.word	0x20000010
 8002478:	20000014 	.word	0x20000014

0800247c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002480:	b090      	sub	sp, #64	; 0x40
 8002482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d00d      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x40>
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	f200 80a1 	bhi.w	80025e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x34>
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ae:	e09b      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_GetSysClockFreq+0x184>)
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024b4:	e09b      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b6:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_GetSysClockFreq+0x188>)
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024ba:	e098      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c6:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d028      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	2200      	movs	r2, #0
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	627a      	str	r2, [r7, #36]	; 0x24
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024e4:	2100      	movs	r1, #0
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_GetSysClockFreq+0x188>)
 80024e8:	fb03 f201 	mul.w	r2, r3, r1
 80024ec:	2300      	movs	r3, #0
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	4a43      	ldr	r2, [pc, #268]	; (8002604 <HAL_RCC_GetSysClockFreq+0x188>)
 80024f6:	fba0 1202 	umull	r1, r2, r0, r2
 80024fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024fc:	460a      	mov	r2, r1
 80024fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002502:	4413      	add	r3, r2
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	2200      	movs	r2, #0
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	61fa      	str	r2, [r7, #28]
 800250e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002516:	f7fd fecb 	bl	80002b0 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4613      	mov	r3, r2
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002522:	e053      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	2200      	movs	r2, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	617a      	str	r2, [r7, #20]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002536:	f04f 0b00 	mov.w	fp, #0
 800253a:	4652      	mov	r2, sl
 800253c:	465b      	mov	r3, fp
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	ebb2 080a 	subs.w	r8, r2, sl
 8002556:	eb63 090b 	sbc.w	r9, r3, fp
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800256a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800256e:	ebb2 0408 	subs.w	r4, r2, r8
 8002572:	eb63 0509 	sbc.w	r5, r3, r9
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	00eb      	lsls	r3, r5, #3
 8002580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002584:	00e2      	lsls	r2, r4, #3
 8002586:	4614      	mov	r4, r2
 8002588:	461d      	mov	r5, r3
 800258a:	eb14 030a 	adds.w	r3, r4, sl
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	eb45 030b 	adc.w	r3, r5, fp
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a2:	4629      	mov	r1, r5
 80025a4:	028b      	lsls	r3, r1, #10
 80025a6:	4621      	mov	r1, r4
 80025a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ac:	4621      	mov	r1, r4
 80025ae:	028a      	lsls	r2, r1, #10
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	2200      	movs	r2, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c0:	f7fd fe76 	bl	80002b0 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4613      	mov	r3, r2
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3740      	adds	r7, #64	; 0x40
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	017d7840 	.word	0x017d7840

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_RCC_GetHCLKFreq+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000010 	.word	0x20000010

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	08003b9c 	.word	0x08003b9c

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800264c:	f7ff ffdc 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0b5b      	lsrs	r3, r3, #13
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	08003b9c 	.word	0x08003b9c

08002670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e042      	b.n	8002708 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe ff10 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f82b 	bl	8002710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002714:	b0c0      	sub	sp, #256	; 0x100
 8002716:	af00      	add	r7, sp, #0
 8002718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	68d9      	ldr	r1, [r3, #12]
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	ea40 0301 	orr.w	r3, r0, r1
 8002738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	431a      	orrs	r2, r3
 8002748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002768:	f021 010c 	bic.w	r1, r1, #12
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002776:	430b      	orrs	r3, r1
 8002778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800277a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278a:	6999      	ldr	r1, [r3, #24]
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	ea40 0301 	orr.w	r3, r0, r1
 8002796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b8f      	ldr	r3, [pc, #572]	; (80029dc <UART_SetConfig+0x2cc>)
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <UART_SetConfig+0xa0>
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b8d      	ldr	r3, [pc, #564]	; (80029e0 <UART_SetConfig+0x2d0>)
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d104      	bne.n	80027ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027b0:	f7ff ff4a 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 80027b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027b8:	e003      	b.n	80027c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ba:	f7ff ff31 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 80027be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027cc:	f040 810c 	bne.w	80029e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	1891      	adds	r1, r2, r2
 80027e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80027ea:	415b      	adcs	r3, r3
 80027ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027f2:	4621      	mov	r1, r4
 80027f4:	eb12 0801 	adds.w	r8, r2, r1
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb43 0901 	adc.w	r9, r3, r1
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002812:	4690      	mov	r8, r2
 8002814:	4699      	mov	r9, r3
 8002816:	4623      	mov	r3, r4
 8002818:	eb18 0303 	adds.w	r3, r8, r3
 800281c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002820:	462b      	mov	r3, r5
 8002822:	eb49 0303 	adc.w	r3, r9, r3
 8002826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800283a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800283e:	460b      	mov	r3, r1
 8002840:	18db      	adds	r3, r3, r3
 8002842:	653b      	str	r3, [r7, #80]	; 0x50
 8002844:	4613      	mov	r3, r2
 8002846:	eb42 0303 	adc.w	r3, r2, r3
 800284a:	657b      	str	r3, [r7, #84]	; 0x54
 800284c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002854:	f7fd fd2c 	bl	80002b0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <UART_SetConfig+0x2d4>)
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	011c      	lsls	r4, r3, #4
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	1891      	adds	r1, r2, r2
 800287e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002880:	415b      	adcs	r3, r3
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002888:	4641      	mov	r1, r8
 800288a:	eb12 0a01 	adds.w	sl, r2, r1
 800288e:	4649      	mov	r1, r9
 8002890:	eb43 0b01 	adc.w	fp, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028a8:	4692      	mov	sl, r2
 80028aa:	469b      	mov	fp, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	eb1a 0303 	adds.w	r3, sl, r3
 80028b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028b6:	464b      	mov	r3, r9
 80028b8:	eb4b 0303 	adc.w	r3, fp, r3
 80028bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028d4:	460b      	mov	r3, r1
 80028d6:	18db      	adds	r3, r3, r3
 80028d8:	643b      	str	r3, [r7, #64]	; 0x40
 80028da:	4613      	mov	r3, r2
 80028dc:	eb42 0303 	adc.w	r3, r2, r3
 80028e0:	647b      	str	r3, [r7, #68]	; 0x44
 80028e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028ea:	f7fd fce1 	bl	80002b0 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <UART_SetConfig+0x2d4>)
 80028f6:	fba3 2301 	umull	r2, r3, r3, r1
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2264      	movs	r2, #100	; 0x64
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800290a:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <UART_SetConfig+0x2d4>)
 800290c:	fba3 2302 	umull	r2, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002918:	441c      	add	r4, r3
 800291a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	63b9      	str	r1, [r7, #56]	; 0x38
 8002934:	415b      	adcs	r3, r3
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800293c:	4641      	mov	r1, r8
 800293e:	1851      	adds	r1, r2, r1
 8002940:	6339      	str	r1, [r7, #48]	; 0x30
 8002942:	4649      	mov	r1, r9
 8002944:	414b      	adcs	r3, r1
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002954:	4659      	mov	r1, fp
 8002956:	00cb      	lsls	r3, r1, #3
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295e:	4651      	mov	r1, sl
 8002960:	00ca      	lsls	r2, r1, #3
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	4603      	mov	r3, r0
 8002968:	4642      	mov	r2, r8
 800296a:	189b      	adds	r3, r3, r2
 800296c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002970:	464b      	mov	r3, r9
 8002972:	460a      	mov	r2, r1
 8002974:	eb42 0303 	adc.w	r3, r2, r3
 8002978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800298c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002990:	460b      	mov	r3, r1
 8002992:	18db      	adds	r3, r3, r3
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
 8002996:	4613      	mov	r3, r2
 8002998:	eb42 0303 	adc.w	r3, r2, r3
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029a6:	f7fd fc83 	bl	80002b0 <__aeabi_uldivmod>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <UART_SetConfig+0x2d4>)
 80029b0:	fba3 1302 	umull	r1, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	2164      	movs	r1, #100	; 0x64
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	3332      	adds	r3, #50	; 0x32
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <UART_SetConfig+0x2d4>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4422      	add	r2, r4
 80029d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029d8:	e106      	b.n	8002be8 <UART_SetConfig+0x4d8>
 80029da:	bf00      	nop
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40011400 	.word	0x40011400
 80029e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029fa:	4642      	mov	r2, r8
 80029fc:	464b      	mov	r3, r9
 80029fe:	1891      	adds	r1, r2, r2
 8002a00:	6239      	str	r1, [r7, #32]
 8002a02:	415b      	adcs	r3, r3
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	1854      	adds	r4, r2, r1
 8002a0e:	4649      	mov	r1, r9
 8002a10:	eb43 0501 	adc.w	r5, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	00eb      	lsls	r3, r5, #3
 8002a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a22:	00e2      	lsls	r2, r4, #3
 8002a24:	4614      	mov	r4, r2
 8002a26:	461d      	mov	r5, r3
 8002a28:	4643      	mov	r3, r8
 8002a2a:	18e3      	adds	r3, r4, r3
 8002a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a30:	464b      	mov	r3, r9
 8002a32:	eb45 0303 	adc.w	r3, r5, r3
 8002a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a56:	4629      	mov	r1, r5
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a60:	4621      	mov	r1, r4
 8002a62:	008a      	lsls	r2, r1, #2
 8002a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a68:	f7fd fc22 	bl	80002b0 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4b60      	ldr	r3, [pc, #384]	; (8002bf4 <UART_SetConfig+0x4e4>)
 8002a72:	fba3 2302 	umull	r2, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	011c      	lsls	r4, r3, #4
 8002a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	61b9      	str	r1, [r7, #24]
 8002a94:	415b      	adcs	r3, r3
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	1851      	adds	r1, r2, r1
 8002aa0:	6139      	str	r1, [r7, #16]
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	414b      	adcs	r3, r1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	00cb      	lsls	r3, r1, #3
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abe:	4651      	mov	r1, sl
 8002ac0:	00ca      	lsls	r2, r1, #3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4642      	mov	r2, r8
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	eb42 0303 	adc.w	r3, r2, r3
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002af4:	4649      	mov	r1, r9
 8002af6:	008b      	lsls	r3, r1, #2
 8002af8:	4641      	mov	r1, r8
 8002afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002afe:	4641      	mov	r1, r8
 8002b00:	008a      	lsls	r2, r1, #2
 8002b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b06:	f7fd fbd3 	bl	80002b0 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <UART_SetConfig+0x4e4>)
 8002b12:	fba3 2301 	umull	r2, r3, r3, r1
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2264      	movs	r2, #100	; 0x64
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	1acb      	subs	r3, r1, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	3332      	adds	r3, #50	; 0x32
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <UART_SetConfig+0x4e4>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b30:	441c      	add	r4, r3
 8002b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b36:	2200      	movs	r2, #0
 8002b38:	673b      	str	r3, [r7, #112]	; 0x70
 8002b3a:	677a      	str	r2, [r7, #116]	; 0x74
 8002b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b50:	4641      	mov	r1, r8
 8002b52:	1851      	adds	r1, r2, r1
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	4649      	mov	r1, r9
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b68:	4659      	mov	r1, fp
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4651      	mov	r1, sl
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b82:	464b      	mov	r3, r9
 8002b84:	460a      	mov	r2, r1
 8002b86:	eb42 0303 	adc.w	r3, r2, r3
 8002b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	663b      	str	r3, [r7, #96]	; 0x60
 8002b96:	667a      	str	r2, [r7, #100]	; 0x64
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	008b      	lsls	r3, r1, #2
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bae:	4641      	mov	r1, r8
 8002bb0:	008a      	lsls	r2, r1, #2
 8002bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bb6:	f7fd fb7b 	bl	80002b0 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <UART_SetConfig+0x4e4>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	; 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	; 0x32
 8002bd2:	4a08      	ldr	r2, [pc, #32]	; (8002bf4 <UART_SetConfig+0x4e4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4422      	add	r2, r4
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf4:	51eb851f 	.word	0x51eb851f

08002bf8 <siprintf>:
 8002bf8:	b40e      	push	{r1, r2, r3}
 8002bfa:	b500      	push	{lr}
 8002bfc:	b09c      	sub	sp, #112	; 0x70
 8002bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8002c00:	9002      	str	r0, [sp, #8]
 8002c02:	9006      	str	r0, [sp, #24]
 8002c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c08:	4809      	ldr	r0, [pc, #36]	; (8002c30 <siprintf+0x38>)
 8002c0a:	9107      	str	r1, [sp, #28]
 8002c0c:	9104      	str	r1, [sp, #16]
 8002c0e:	4909      	ldr	r1, [pc, #36]	; (8002c34 <siprintf+0x3c>)
 8002c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c14:	9105      	str	r1, [sp, #20]
 8002c16:	6800      	ldr	r0, [r0, #0]
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	a902      	add	r1, sp, #8
 8002c1c:	f000 f9a2 	bl	8002f64 <_svfiprintf_r>
 8002c20:	9b02      	ldr	r3, [sp, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	b01c      	add	sp, #112	; 0x70
 8002c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c2c:	b003      	add	sp, #12
 8002c2e:	4770      	bx	lr
 8002c30:	20000068 	.word	0x20000068
 8002c34:	ffff0208 	.word	0xffff0208

08002c38 <memset>:
 8002c38:	4402      	add	r2, r0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <memset+0xa>
 8002c40:	4770      	bx	lr
 8002c42:	f803 1b01 	strb.w	r1, [r3], #1
 8002c46:	e7f9      	b.n	8002c3c <memset+0x4>

08002c48 <strcat>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	7814      	ldrb	r4, [r2, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	3201      	adds	r2, #1
 8002c52:	2c00      	cmp	r4, #0
 8002c54:	d1fa      	bne.n	8002c4c <strcat+0x4>
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d1f9      	bne.n	8002c58 <strcat+0x10>
 8002c64:	bd10      	pop	{r4, pc}
	...

08002c68 <__errno>:
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <__errno+0x8>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000068 	.word	0x20000068

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	4d0d      	ldr	r5, [pc, #52]	; (8002cac <__libc_init_array+0x38>)
 8002c78:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	2600      	movs	r6, #0
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	4d0b      	ldr	r5, [pc, #44]	; (8002cb4 <__libc_init_array+0x40>)
 8002c86:	4c0c      	ldr	r4, [pc, #48]	; (8002cb8 <__libc_init_array+0x44>)
 8002c88:	f000 fc6a 	bl	8003560 <_init>
 8002c8c:	1b64      	subs	r4, r4, r5
 8002c8e:	10a4      	asrs	r4, r4, #2
 8002c90:	2600      	movs	r6, #0
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08003be0 	.word	0x08003be0
 8002cb0:	08003be0 	.word	0x08003be0
 8002cb4:	08003be0 	.word	0x08003be0
 8002cb8:	08003be4 	.word	0x08003be4

08002cbc <__retarget_lock_acquire_recursive>:
 8002cbc:	4770      	bx	lr

08002cbe <__retarget_lock_release_recursive>:
 8002cbe:	4770      	bx	lr

08002cc0 <_free_r>:
 8002cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cc2:	2900      	cmp	r1, #0
 8002cc4:	d044      	beq.n	8002d50 <_free_r+0x90>
 8002cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cca:	9001      	str	r0, [sp, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f1a1 0404 	sub.w	r4, r1, #4
 8002cd2:	bfb8      	it	lt
 8002cd4:	18e4      	addlt	r4, r4, r3
 8002cd6:	f000 f8df 	bl	8002e98 <__malloc_lock>
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <_free_r+0x94>)
 8002cdc:	9801      	ldr	r0, [sp, #4]
 8002cde:	6813      	ldr	r3, [r2, #0]
 8002ce0:	b933      	cbnz	r3, 8002cf0 <_free_r+0x30>
 8002ce2:	6063      	str	r3, [r4, #4]
 8002ce4:	6014      	str	r4, [r2, #0]
 8002ce6:	b003      	add	sp, #12
 8002ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cec:	f000 b8da 	b.w	8002ea4 <__malloc_unlock>
 8002cf0:	42a3      	cmp	r3, r4
 8002cf2:	d908      	bls.n	8002d06 <_free_r+0x46>
 8002cf4:	6825      	ldr	r5, [r4, #0]
 8002cf6:	1961      	adds	r1, r4, r5
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	bf01      	itttt	eq
 8002cfc:	6819      	ldreq	r1, [r3, #0]
 8002cfe:	685b      	ldreq	r3, [r3, #4]
 8002d00:	1949      	addeq	r1, r1, r5
 8002d02:	6021      	streq	r1, [r4, #0]
 8002d04:	e7ed      	b.n	8002ce2 <_free_r+0x22>
 8002d06:	461a      	mov	r2, r3
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b10b      	cbz	r3, 8002d10 <_free_r+0x50>
 8002d0c:	42a3      	cmp	r3, r4
 8002d0e:	d9fa      	bls.n	8002d06 <_free_r+0x46>
 8002d10:	6811      	ldr	r1, [r2, #0]
 8002d12:	1855      	adds	r5, r2, r1
 8002d14:	42a5      	cmp	r5, r4
 8002d16:	d10b      	bne.n	8002d30 <_free_r+0x70>
 8002d18:	6824      	ldr	r4, [r4, #0]
 8002d1a:	4421      	add	r1, r4
 8002d1c:	1854      	adds	r4, r2, r1
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	6011      	str	r1, [r2, #0]
 8002d22:	d1e0      	bne.n	8002ce6 <_free_r+0x26>
 8002d24:	681c      	ldr	r4, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	6053      	str	r3, [r2, #4]
 8002d2a:	440c      	add	r4, r1
 8002d2c:	6014      	str	r4, [r2, #0]
 8002d2e:	e7da      	b.n	8002ce6 <_free_r+0x26>
 8002d30:	d902      	bls.n	8002d38 <_free_r+0x78>
 8002d32:	230c      	movs	r3, #12
 8002d34:	6003      	str	r3, [r0, #0]
 8002d36:	e7d6      	b.n	8002ce6 <_free_r+0x26>
 8002d38:	6825      	ldr	r5, [r4, #0]
 8002d3a:	1961      	adds	r1, r4, r5
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	bf04      	itt	eq
 8002d40:	6819      	ldreq	r1, [r3, #0]
 8002d42:	685b      	ldreq	r3, [r3, #4]
 8002d44:	6063      	str	r3, [r4, #4]
 8002d46:	bf04      	itt	eq
 8002d48:	1949      	addeq	r1, r1, r5
 8002d4a:	6021      	streq	r1, [r4, #0]
 8002d4c:	6054      	str	r4, [r2, #4]
 8002d4e:	e7ca      	b.n	8002ce6 <_free_r+0x26>
 8002d50:	b003      	add	sp, #12
 8002d52:	bd30      	pop	{r4, r5, pc}
 8002d54:	200003a4 	.word	0x200003a4

08002d58 <sbrk_aligned>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	4e0e      	ldr	r6, [pc, #56]	; (8002d94 <sbrk_aligned+0x3c>)
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	6831      	ldr	r1, [r6, #0]
 8002d60:	4605      	mov	r5, r0
 8002d62:	b911      	cbnz	r1, 8002d6a <sbrk_aligned+0x12>
 8002d64:	f000 fba6 	bl	80034b4 <_sbrk_r>
 8002d68:	6030      	str	r0, [r6, #0]
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 fba1 	bl	80034b4 <_sbrk_r>
 8002d72:	1c43      	adds	r3, r0, #1
 8002d74:	d00a      	beq.n	8002d8c <sbrk_aligned+0x34>
 8002d76:	1cc4      	adds	r4, r0, #3
 8002d78:	f024 0403 	bic.w	r4, r4, #3
 8002d7c:	42a0      	cmp	r0, r4
 8002d7e:	d007      	beq.n	8002d90 <sbrk_aligned+0x38>
 8002d80:	1a21      	subs	r1, r4, r0
 8002d82:	4628      	mov	r0, r5
 8002d84:	f000 fb96 	bl	80034b4 <_sbrk_r>
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d101      	bne.n	8002d90 <sbrk_aligned+0x38>
 8002d8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d90:	4620      	mov	r0, r4
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	200003a8 	.word	0x200003a8

08002d98 <_malloc_r>:
 8002d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d9c:	1ccd      	adds	r5, r1, #3
 8002d9e:	f025 0503 	bic.w	r5, r5, #3
 8002da2:	3508      	adds	r5, #8
 8002da4:	2d0c      	cmp	r5, #12
 8002da6:	bf38      	it	cc
 8002da8:	250c      	movcc	r5, #12
 8002daa:	2d00      	cmp	r5, #0
 8002dac:	4607      	mov	r7, r0
 8002dae:	db01      	blt.n	8002db4 <_malloc_r+0x1c>
 8002db0:	42a9      	cmp	r1, r5
 8002db2:	d905      	bls.n	8002dc0 <_malloc_r+0x28>
 8002db4:	230c      	movs	r3, #12
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	2600      	movs	r6, #0
 8002dba:	4630      	mov	r0, r6
 8002dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e94 <_malloc_r+0xfc>
 8002dc4:	f000 f868 	bl	8002e98 <__malloc_lock>
 8002dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8002dcc:	461c      	mov	r4, r3
 8002dce:	bb5c      	cbnz	r4, 8002e28 <_malloc_r+0x90>
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	f7ff ffc0 	bl	8002d58 <sbrk_aligned>
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	4604      	mov	r4, r0
 8002ddc:	d155      	bne.n	8002e8a <_malloc_r+0xf2>
 8002dde:	f8d8 4000 	ldr.w	r4, [r8]
 8002de2:	4626      	mov	r6, r4
 8002de4:	2e00      	cmp	r6, #0
 8002de6:	d145      	bne.n	8002e74 <_malloc_r+0xdc>
 8002de8:	2c00      	cmp	r4, #0
 8002dea:	d048      	beq.n	8002e7e <_malloc_r+0xe6>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	4631      	mov	r1, r6
 8002df0:	4638      	mov	r0, r7
 8002df2:	eb04 0903 	add.w	r9, r4, r3
 8002df6:	f000 fb5d 	bl	80034b4 <_sbrk_r>
 8002dfa:	4581      	cmp	r9, r0
 8002dfc:	d13f      	bne.n	8002e7e <_malloc_r+0xe6>
 8002dfe:	6821      	ldr	r1, [r4, #0]
 8002e00:	1a6d      	subs	r5, r5, r1
 8002e02:	4629      	mov	r1, r5
 8002e04:	4638      	mov	r0, r7
 8002e06:	f7ff ffa7 	bl	8002d58 <sbrk_aligned>
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d037      	beq.n	8002e7e <_malloc_r+0xe6>
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	442b      	add	r3, r5
 8002e12:	6023      	str	r3, [r4, #0]
 8002e14:	f8d8 3000 	ldr.w	r3, [r8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d038      	beq.n	8002e8e <_malloc_r+0xf6>
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	42a2      	cmp	r2, r4
 8002e20:	d12b      	bne.n	8002e7a <_malloc_r+0xe2>
 8002e22:	2200      	movs	r2, #0
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e00f      	b.n	8002e48 <_malloc_r+0xb0>
 8002e28:	6822      	ldr	r2, [r4, #0]
 8002e2a:	1b52      	subs	r2, r2, r5
 8002e2c:	d41f      	bmi.n	8002e6e <_malloc_r+0xd6>
 8002e2e:	2a0b      	cmp	r2, #11
 8002e30:	d917      	bls.n	8002e62 <_malloc_r+0xca>
 8002e32:	1961      	adds	r1, r4, r5
 8002e34:	42a3      	cmp	r3, r4
 8002e36:	6025      	str	r5, [r4, #0]
 8002e38:	bf18      	it	ne
 8002e3a:	6059      	strne	r1, [r3, #4]
 8002e3c:	6863      	ldr	r3, [r4, #4]
 8002e3e:	bf08      	it	eq
 8002e40:	f8c8 1000 	streq.w	r1, [r8]
 8002e44:	5162      	str	r2, [r4, r5]
 8002e46:	604b      	str	r3, [r1, #4]
 8002e48:	4638      	mov	r0, r7
 8002e4a:	f104 060b 	add.w	r6, r4, #11
 8002e4e:	f000 f829 	bl	8002ea4 <__malloc_unlock>
 8002e52:	f026 0607 	bic.w	r6, r6, #7
 8002e56:	1d23      	adds	r3, r4, #4
 8002e58:	1af2      	subs	r2, r6, r3
 8002e5a:	d0ae      	beq.n	8002dba <_malloc_r+0x22>
 8002e5c:	1b9b      	subs	r3, r3, r6
 8002e5e:	50a3      	str	r3, [r4, r2]
 8002e60:	e7ab      	b.n	8002dba <_malloc_r+0x22>
 8002e62:	42a3      	cmp	r3, r4
 8002e64:	6862      	ldr	r2, [r4, #4]
 8002e66:	d1dd      	bne.n	8002e24 <_malloc_r+0x8c>
 8002e68:	f8c8 2000 	str.w	r2, [r8]
 8002e6c:	e7ec      	b.n	8002e48 <_malloc_r+0xb0>
 8002e6e:	4623      	mov	r3, r4
 8002e70:	6864      	ldr	r4, [r4, #4]
 8002e72:	e7ac      	b.n	8002dce <_malloc_r+0x36>
 8002e74:	4634      	mov	r4, r6
 8002e76:	6876      	ldr	r6, [r6, #4]
 8002e78:	e7b4      	b.n	8002de4 <_malloc_r+0x4c>
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	e7cc      	b.n	8002e18 <_malloc_r+0x80>
 8002e7e:	230c      	movs	r3, #12
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4638      	mov	r0, r7
 8002e84:	f000 f80e 	bl	8002ea4 <__malloc_unlock>
 8002e88:	e797      	b.n	8002dba <_malloc_r+0x22>
 8002e8a:	6025      	str	r5, [r4, #0]
 8002e8c:	e7dc      	b.n	8002e48 <_malloc_r+0xb0>
 8002e8e:	605b      	str	r3, [r3, #4]
 8002e90:	deff      	udf	#255	; 0xff
 8002e92:	bf00      	nop
 8002e94:	200003a4 	.word	0x200003a4

08002e98 <__malloc_lock>:
 8002e98:	4801      	ldr	r0, [pc, #4]	; (8002ea0 <__malloc_lock+0x8>)
 8002e9a:	f7ff bf0f 	b.w	8002cbc <__retarget_lock_acquire_recursive>
 8002e9e:	bf00      	nop
 8002ea0:	200003a0 	.word	0x200003a0

08002ea4 <__malloc_unlock>:
 8002ea4:	4801      	ldr	r0, [pc, #4]	; (8002eac <__malloc_unlock+0x8>)
 8002ea6:	f7ff bf0a 	b.w	8002cbe <__retarget_lock_release_recursive>
 8002eaa:	bf00      	nop
 8002eac:	200003a0 	.word	0x200003a0

08002eb0 <__ssputs_r>:
 8002eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb4:	688e      	ldr	r6, [r1, #8]
 8002eb6:	461f      	mov	r7, r3
 8002eb8:	42be      	cmp	r6, r7
 8002eba:	680b      	ldr	r3, [r1, #0]
 8002ebc:	4682      	mov	sl, r0
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	4690      	mov	r8, r2
 8002ec2:	d82c      	bhi.n	8002f1e <__ssputs_r+0x6e>
 8002ec4:	898a      	ldrh	r2, [r1, #12]
 8002ec6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002eca:	d026      	beq.n	8002f1a <__ssputs_r+0x6a>
 8002ecc:	6965      	ldr	r5, [r4, #20]
 8002ece:	6909      	ldr	r1, [r1, #16]
 8002ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ed4:	eba3 0901 	sub.w	r9, r3, r1
 8002ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002edc:	1c7b      	adds	r3, r7, #1
 8002ede:	444b      	add	r3, r9
 8002ee0:	106d      	asrs	r5, r5, #1
 8002ee2:	429d      	cmp	r5, r3
 8002ee4:	bf38      	it	cc
 8002ee6:	461d      	movcc	r5, r3
 8002ee8:	0553      	lsls	r3, r2, #21
 8002eea:	d527      	bpl.n	8002f3c <__ssputs_r+0x8c>
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7ff ff53 	bl	8002d98 <_malloc_r>
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	b360      	cbz	r0, 8002f50 <__ssputs_r+0xa0>
 8002ef6:	6921      	ldr	r1, [r4, #16]
 8002ef8:	464a      	mov	r2, r9
 8002efa:	f000 faeb 	bl	80034d4 <memcpy>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f08:	81a3      	strh	r3, [r4, #12]
 8002f0a:	6126      	str	r6, [r4, #16]
 8002f0c:	6165      	str	r5, [r4, #20]
 8002f0e:	444e      	add	r6, r9
 8002f10:	eba5 0509 	sub.w	r5, r5, r9
 8002f14:	6026      	str	r6, [r4, #0]
 8002f16:	60a5      	str	r5, [r4, #8]
 8002f18:	463e      	mov	r6, r7
 8002f1a:	42be      	cmp	r6, r7
 8002f1c:	d900      	bls.n	8002f20 <__ssputs_r+0x70>
 8002f1e:	463e      	mov	r6, r7
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	4632      	mov	r2, r6
 8002f24:	4641      	mov	r1, r8
 8002f26:	f000 faab 	bl	8003480 <memmove>
 8002f2a:	68a3      	ldr	r3, [r4, #8]
 8002f2c:	1b9b      	subs	r3, r3, r6
 8002f2e:	60a3      	str	r3, [r4, #8]
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	4433      	add	r3, r6
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	2000      	movs	r0, #0
 8002f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f3c:	462a      	mov	r2, r5
 8002f3e:	f000 fad7 	bl	80034f0 <_realloc_r>
 8002f42:	4606      	mov	r6, r0
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1e0      	bne.n	8002f0a <__ssputs_r+0x5a>
 8002f48:	6921      	ldr	r1, [r4, #16]
 8002f4a:	4650      	mov	r0, sl
 8002f4c:	f7ff feb8 	bl	8002cc0 <_free_r>
 8002f50:	230c      	movs	r3, #12
 8002f52:	f8ca 3000 	str.w	r3, [sl]
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f5c:	81a3      	strh	r3, [r4, #12]
 8002f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f62:	e7e9      	b.n	8002f38 <__ssputs_r+0x88>

08002f64 <_svfiprintf_r>:
 8002f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f68:	4698      	mov	r8, r3
 8002f6a:	898b      	ldrh	r3, [r1, #12]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	b09d      	sub	sp, #116	; 0x74
 8002f70:	4607      	mov	r7, r0
 8002f72:	460d      	mov	r5, r1
 8002f74:	4614      	mov	r4, r2
 8002f76:	d50e      	bpl.n	8002f96 <_svfiprintf_r+0x32>
 8002f78:	690b      	ldr	r3, [r1, #16]
 8002f7a:	b963      	cbnz	r3, 8002f96 <_svfiprintf_r+0x32>
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	f7ff ff0b 	bl	8002d98 <_malloc_r>
 8002f82:	6028      	str	r0, [r5, #0]
 8002f84:	6128      	str	r0, [r5, #16]
 8002f86:	b920      	cbnz	r0, 8002f92 <_svfiprintf_r+0x2e>
 8002f88:	230c      	movs	r3, #12
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f90:	e0d0      	b.n	8003134 <_svfiprintf_r+0x1d0>
 8002f92:	2340      	movs	r3, #64	; 0x40
 8002f94:	616b      	str	r3, [r5, #20]
 8002f96:	2300      	movs	r3, #0
 8002f98:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fa4:	2330      	movs	r3, #48	; 0x30
 8002fa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800314c <_svfiprintf_r+0x1e8>
 8002faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fae:	f04f 0901 	mov.w	r9, #1
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	469a      	mov	sl, r3
 8002fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fba:	b10a      	cbz	r2, 8002fc0 <_svfiprintf_r+0x5c>
 8002fbc:	2a25      	cmp	r2, #37	; 0x25
 8002fbe:	d1f9      	bne.n	8002fb4 <_svfiprintf_r+0x50>
 8002fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8002fc4:	d00b      	beq.n	8002fde <_svfiprintf_r+0x7a>
 8002fc6:	465b      	mov	r3, fp
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f7ff ff6f 	bl	8002eb0 <__ssputs_r>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	f000 80a9 	beq.w	800312a <_svfiprintf_r+0x1c6>
 8002fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fda:	445a      	add	r2, fp
 8002fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8002fde:	f89a 3000 	ldrb.w	r3, [sl]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a1 	beq.w	800312a <_svfiprintf_r+0x1c6>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ff2:	f10a 0a01 	add.w	sl, sl, #1
 8002ff6:	9304      	str	r3, [sp, #16]
 8002ff8:	9307      	str	r3, [sp, #28]
 8002ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8003000:	4654      	mov	r4, sl
 8003002:	2205      	movs	r2, #5
 8003004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003008:	4850      	ldr	r0, [pc, #320]	; (800314c <_svfiprintf_r+0x1e8>)
 800300a:	f7fd f901 	bl	8000210 <memchr>
 800300e:	9a04      	ldr	r2, [sp, #16]
 8003010:	b9d8      	cbnz	r0, 800304a <_svfiprintf_r+0xe6>
 8003012:	06d0      	lsls	r0, r2, #27
 8003014:	bf44      	itt	mi
 8003016:	2320      	movmi	r3, #32
 8003018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800301c:	0711      	lsls	r1, r2, #28
 800301e:	bf44      	itt	mi
 8003020:	232b      	movmi	r3, #43	; 0x2b
 8003022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003026:	f89a 3000 	ldrb.w	r3, [sl]
 800302a:	2b2a      	cmp	r3, #42	; 0x2a
 800302c:	d015      	beq.n	800305a <_svfiprintf_r+0xf6>
 800302e:	9a07      	ldr	r2, [sp, #28]
 8003030:	4654      	mov	r4, sl
 8003032:	2000      	movs	r0, #0
 8003034:	f04f 0c0a 	mov.w	ip, #10
 8003038:	4621      	mov	r1, r4
 800303a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800303e:	3b30      	subs	r3, #48	; 0x30
 8003040:	2b09      	cmp	r3, #9
 8003042:	d94d      	bls.n	80030e0 <_svfiprintf_r+0x17c>
 8003044:	b1b0      	cbz	r0, 8003074 <_svfiprintf_r+0x110>
 8003046:	9207      	str	r2, [sp, #28]
 8003048:	e014      	b.n	8003074 <_svfiprintf_r+0x110>
 800304a:	eba0 0308 	sub.w	r3, r0, r8
 800304e:	fa09 f303 	lsl.w	r3, r9, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	9304      	str	r3, [sp, #16]
 8003056:	46a2      	mov	sl, r4
 8003058:	e7d2      	b.n	8003000 <_svfiprintf_r+0x9c>
 800305a:	9b03      	ldr	r3, [sp, #12]
 800305c:	1d19      	adds	r1, r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	9103      	str	r1, [sp, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	bfbb      	ittet	lt
 8003066:	425b      	neglt	r3, r3
 8003068:	f042 0202 	orrlt.w	r2, r2, #2
 800306c:	9307      	strge	r3, [sp, #28]
 800306e:	9307      	strlt	r3, [sp, #28]
 8003070:	bfb8      	it	lt
 8003072:	9204      	strlt	r2, [sp, #16]
 8003074:	7823      	ldrb	r3, [r4, #0]
 8003076:	2b2e      	cmp	r3, #46	; 0x2e
 8003078:	d10c      	bne.n	8003094 <_svfiprintf_r+0x130>
 800307a:	7863      	ldrb	r3, [r4, #1]
 800307c:	2b2a      	cmp	r3, #42	; 0x2a
 800307e:	d134      	bne.n	80030ea <_svfiprintf_r+0x186>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	1d1a      	adds	r2, r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	bfb8      	it	lt
 800308c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003090:	3402      	adds	r4, #2
 8003092:	9305      	str	r3, [sp, #20]
 8003094:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800315c <_svfiprintf_r+0x1f8>
 8003098:	7821      	ldrb	r1, [r4, #0]
 800309a:	2203      	movs	r2, #3
 800309c:	4650      	mov	r0, sl
 800309e:	f7fd f8b7 	bl	8000210 <memchr>
 80030a2:	b138      	cbz	r0, 80030b4 <_svfiprintf_r+0x150>
 80030a4:	9b04      	ldr	r3, [sp, #16]
 80030a6:	eba0 000a 	sub.w	r0, r0, sl
 80030aa:	2240      	movs	r2, #64	; 0x40
 80030ac:	4082      	lsls	r2, r0
 80030ae:	4313      	orrs	r3, r2
 80030b0:	3401      	adds	r4, #1
 80030b2:	9304      	str	r3, [sp, #16]
 80030b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b8:	4825      	ldr	r0, [pc, #148]	; (8003150 <_svfiprintf_r+0x1ec>)
 80030ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030be:	2206      	movs	r2, #6
 80030c0:	f7fd f8a6 	bl	8000210 <memchr>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d038      	beq.n	800313a <_svfiprintf_r+0x1d6>
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <_svfiprintf_r+0x1f0>)
 80030ca:	bb1b      	cbnz	r3, 8003114 <_svfiprintf_r+0x1b0>
 80030cc:	9b03      	ldr	r3, [sp, #12]
 80030ce:	3307      	adds	r3, #7
 80030d0:	f023 0307 	bic.w	r3, r3, #7
 80030d4:	3308      	adds	r3, #8
 80030d6:	9303      	str	r3, [sp, #12]
 80030d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030da:	4433      	add	r3, r6
 80030dc:	9309      	str	r3, [sp, #36]	; 0x24
 80030de:	e768      	b.n	8002fb2 <_svfiprintf_r+0x4e>
 80030e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80030e4:	460c      	mov	r4, r1
 80030e6:	2001      	movs	r0, #1
 80030e8:	e7a6      	b.n	8003038 <_svfiprintf_r+0xd4>
 80030ea:	2300      	movs	r3, #0
 80030ec:	3401      	adds	r4, #1
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	4619      	mov	r1, r3
 80030f2:	f04f 0c0a 	mov.w	ip, #10
 80030f6:	4620      	mov	r0, r4
 80030f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030fc:	3a30      	subs	r2, #48	; 0x30
 80030fe:	2a09      	cmp	r2, #9
 8003100:	d903      	bls.n	800310a <_svfiprintf_r+0x1a6>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0c6      	beq.n	8003094 <_svfiprintf_r+0x130>
 8003106:	9105      	str	r1, [sp, #20]
 8003108:	e7c4      	b.n	8003094 <_svfiprintf_r+0x130>
 800310a:	fb0c 2101 	mla	r1, ip, r1, r2
 800310e:	4604      	mov	r4, r0
 8003110:	2301      	movs	r3, #1
 8003112:	e7f0      	b.n	80030f6 <_svfiprintf_r+0x192>
 8003114:	ab03      	add	r3, sp, #12
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	462a      	mov	r2, r5
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <_svfiprintf_r+0x1f4>)
 800311c:	a904      	add	r1, sp, #16
 800311e:	4638      	mov	r0, r7
 8003120:	f3af 8000 	nop.w
 8003124:	1c42      	adds	r2, r0, #1
 8003126:	4606      	mov	r6, r0
 8003128:	d1d6      	bne.n	80030d8 <_svfiprintf_r+0x174>
 800312a:	89ab      	ldrh	r3, [r5, #12]
 800312c:	065b      	lsls	r3, r3, #25
 800312e:	f53f af2d 	bmi.w	8002f8c <_svfiprintf_r+0x28>
 8003132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003134:	b01d      	add	sp, #116	; 0x74
 8003136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800313a:	ab03      	add	r3, sp, #12
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462a      	mov	r2, r5
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <_svfiprintf_r+0x1f4>)
 8003142:	a904      	add	r1, sp, #16
 8003144:	4638      	mov	r0, r7
 8003146:	f000 f879 	bl	800323c <_printf_i>
 800314a:	e7eb      	b.n	8003124 <_svfiprintf_r+0x1c0>
 800314c:	08003ba4 	.word	0x08003ba4
 8003150:	08003bae 	.word	0x08003bae
 8003154:	00000000 	.word	0x00000000
 8003158:	08002eb1 	.word	0x08002eb1
 800315c:	08003baa 	.word	0x08003baa

08003160 <_printf_common>:
 8003160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003164:	4616      	mov	r6, r2
 8003166:	4699      	mov	r9, r3
 8003168:	688a      	ldr	r2, [r1, #8]
 800316a:	690b      	ldr	r3, [r1, #16]
 800316c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003170:	4293      	cmp	r3, r2
 8003172:	bfb8      	it	lt
 8003174:	4613      	movlt	r3, r2
 8003176:	6033      	str	r3, [r6, #0]
 8003178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800317c:	4607      	mov	r7, r0
 800317e:	460c      	mov	r4, r1
 8003180:	b10a      	cbz	r2, 8003186 <_printf_common+0x26>
 8003182:	3301      	adds	r3, #1
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	0699      	lsls	r1, r3, #26
 800318a:	bf42      	ittt	mi
 800318c:	6833      	ldrmi	r3, [r6, #0]
 800318e:	3302      	addmi	r3, #2
 8003190:	6033      	strmi	r3, [r6, #0]
 8003192:	6825      	ldr	r5, [r4, #0]
 8003194:	f015 0506 	ands.w	r5, r5, #6
 8003198:	d106      	bne.n	80031a8 <_printf_common+0x48>
 800319a:	f104 0a19 	add.w	sl, r4, #25
 800319e:	68e3      	ldr	r3, [r4, #12]
 80031a0:	6832      	ldr	r2, [r6, #0]
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	42ab      	cmp	r3, r5
 80031a6:	dc26      	bgt.n	80031f6 <_printf_common+0x96>
 80031a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031ac:	1e13      	subs	r3, r2, #0
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	bf18      	it	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	0692      	lsls	r2, r2, #26
 80031b6:	d42b      	bmi.n	8003210 <_printf_common+0xb0>
 80031b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031bc:	4649      	mov	r1, r9
 80031be:	4638      	mov	r0, r7
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d01e      	beq.n	8003204 <_printf_common+0xa4>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	6922      	ldr	r2, [r4, #16]
 80031ca:	f003 0306 	and.w	r3, r3, #6
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	bf02      	ittt	eq
 80031d2:	68e5      	ldreq	r5, [r4, #12]
 80031d4:	6833      	ldreq	r3, [r6, #0]
 80031d6:	1aed      	subeq	r5, r5, r3
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	bf0c      	ite	eq
 80031dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031e0:	2500      	movne	r5, #0
 80031e2:	4293      	cmp	r3, r2
 80031e4:	bfc4      	itt	gt
 80031e6:	1a9b      	subgt	r3, r3, r2
 80031e8:	18ed      	addgt	r5, r5, r3
 80031ea:	2600      	movs	r6, #0
 80031ec:	341a      	adds	r4, #26
 80031ee:	42b5      	cmp	r5, r6
 80031f0:	d11a      	bne.n	8003228 <_printf_common+0xc8>
 80031f2:	2000      	movs	r0, #0
 80031f4:	e008      	b.n	8003208 <_printf_common+0xa8>
 80031f6:	2301      	movs	r3, #1
 80031f8:	4652      	mov	r2, sl
 80031fa:	4649      	mov	r1, r9
 80031fc:	4638      	mov	r0, r7
 80031fe:	47c0      	blx	r8
 8003200:	3001      	adds	r0, #1
 8003202:	d103      	bne.n	800320c <_printf_common+0xac>
 8003204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800320c:	3501      	adds	r5, #1
 800320e:	e7c6      	b.n	800319e <_printf_common+0x3e>
 8003210:	18e1      	adds	r1, r4, r3
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	2030      	movs	r0, #48	; 0x30
 8003216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800321a:	4422      	add	r2, r4
 800321c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003224:	3302      	adds	r3, #2
 8003226:	e7c7      	b.n	80031b8 <_printf_common+0x58>
 8003228:	2301      	movs	r3, #1
 800322a:	4622      	mov	r2, r4
 800322c:	4649      	mov	r1, r9
 800322e:	4638      	mov	r0, r7
 8003230:	47c0      	blx	r8
 8003232:	3001      	adds	r0, #1
 8003234:	d0e6      	beq.n	8003204 <_printf_common+0xa4>
 8003236:	3601      	adds	r6, #1
 8003238:	e7d9      	b.n	80031ee <_printf_common+0x8e>
	...

0800323c <_printf_i>:
 800323c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	7e0f      	ldrb	r7, [r1, #24]
 8003242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003244:	2f78      	cmp	r7, #120	; 0x78
 8003246:	4691      	mov	r9, r2
 8003248:	4680      	mov	r8, r0
 800324a:	460c      	mov	r4, r1
 800324c:	469a      	mov	sl, r3
 800324e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003252:	d807      	bhi.n	8003264 <_printf_i+0x28>
 8003254:	2f62      	cmp	r7, #98	; 0x62
 8003256:	d80a      	bhi.n	800326e <_printf_i+0x32>
 8003258:	2f00      	cmp	r7, #0
 800325a:	f000 80d4 	beq.w	8003406 <_printf_i+0x1ca>
 800325e:	2f58      	cmp	r7, #88	; 0x58
 8003260:	f000 80c0 	beq.w	80033e4 <_printf_i+0x1a8>
 8003264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800326c:	e03a      	b.n	80032e4 <_printf_i+0xa8>
 800326e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003272:	2b15      	cmp	r3, #21
 8003274:	d8f6      	bhi.n	8003264 <_printf_i+0x28>
 8003276:	a101      	add	r1, pc, #4	; (adr r1, 800327c <_printf_i+0x40>)
 8003278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800327c:	080032d5 	.word	0x080032d5
 8003280:	080032e9 	.word	0x080032e9
 8003284:	08003265 	.word	0x08003265
 8003288:	08003265 	.word	0x08003265
 800328c:	08003265 	.word	0x08003265
 8003290:	08003265 	.word	0x08003265
 8003294:	080032e9 	.word	0x080032e9
 8003298:	08003265 	.word	0x08003265
 800329c:	08003265 	.word	0x08003265
 80032a0:	08003265 	.word	0x08003265
 80032a4:	08003265 	.word	0x08003265
 80032a8:	080033ed 	.word	0x080033ed
 80032ac:	08003315 	.word	0x08003315
 80032b0:	080033a7 	.word	0x080033a7
 80032b4:	08003265 	.word	0x08003265
 80032b8:	08003265 	.word	0x08003265
 80032bc:	0800340f 	.word	0x0800340f
 80032c0:	08003265 	.word	0x08003265
 80032c4:	08003315 	.word	0x08003315
 80032c8:	08003265 	.word	0x08003265
 80032cc:	08003265 	.word	0x08003265
 80032d0:	080033af 	.word	0x080033af
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	1d1a      	adds	r2, r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	602a      	str	r2, [r5, #0]
 80032dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032e4:	2301      	movs	r3, #1
 80032e6:	e09f      	b.n	8003428 <_printf_i+0x1ec>
 80032e8:	6820      	ldr	r0, [r4, #0]
 80032ea:	682b      	ldr	r3, [r5, #0]
 80032ec:	0607      	lsls	r7, r0, #24
 80032ee:	f103 0104 	add.w	r1, r3, #4
 80032f2:	6029      	str	r1, [r5, #0]
 80032f4:	d501      	bpl.n	80032fa <_printf_i+0xbe>
 80032f6:	681e      	ldr	r6, [r3, #0]
 80032f8:	e003      	b.n	8003302 <_printf_i+0xc6>
 80032fa:	0646      	lsls	r6, r0, #25
 80032fc:	d5fb      	bpl.n	80032f6 <_printf_i+0xba>
 80032fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003302:	2e00      	cmp	r6, #0
 8003304:	da03      	bge.n	800330e <_printf_i+0xd2>
 8003306:	232d      	movs	r3, #45	; 0x2d
 8003308:	4276      	negs	r6, r6
 800330a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800330e:	485a      	ldr	r0, [pc, #360]	; (8003478 <_printf_i+0x23c>)
 8003310:	230a      	movs	r3, #10
 8003312:	e012      	b.n	800333a <_printf_i+0xfe>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	1d19      	adds	r1, r3, #4
 800331a:	6029      	str	r1, [r5, #0]
 800331c:	0605      	lsls	r5, r0, #24
 800331e:	d501      	bpl.n	8003324 <_printf_i+0xe8>
 8003320:	681e      	ldr	r6, [r3, #0]
 8003322:	e002      	b.n	800332a <_printf_i+0xee>
 8003324:	0641      	lsls	r1, r0, #25
 8003326:	d5fb      	bpl.n	8003320 <_printf_i+0xe4>
 8003328:	881e      	ldrh	r6, [r3, #0]
 800332a:	4853      	ldr	r0, [pc, #332]	; (8003478 <_printf_i+0x23c>)
 800332c:	2f6f      	cmp	r7, #111	; 0x6f
 800332e:	bf0c      	ite	eq
 8003330:	2308      	moveq	r3, #8
 8003332:	230a      	movne	r3, #10
 8003334:	2100      	movs	r1, #0
 8003336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800333a:	6865      	ldr	r5, [r4, #4]
 800333c:	60a5      	str	r5, [r4, #8]
 800333e:	2d00      	cmp	r5, #0
 8003340:	bfa2      	ittt	ge
 8003342:	6821      	ldrge	r1, [r4, #0]
 8003344:	f021 0104 	bicge.w	r1, r1, #4
 8003348:	6021      	strge	r1, [r4, #0]
 800334a:	b90e      	cbnz	r6, 8003350 <_printf_i+0x114>
 800334c:	2d00      	cmp	r5, #0
 800334e:	d04b      	beq.n	80033e8 <_printf_i+0x1ac>
 8003350:	4615      	mov	r5, r2
 8003352:	fbb6 f1f3 	udiv	r1, r6, r3
 8003356:	fb03 6711 	mls	r7, r3, r1, r6
 800335a:	5dc7      	ldrb	r7, [r0, r7]
 800335c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003360:	4637      	mov	r7, r6
 8003362:	42bb      	cmp	r3, r7
 8003364:	460e      	mov	r6, r1
 8003366:	d9f4      	bls.n	8003352 <_printf_i+0x116>
 8003368:	2b08      	cmp	r3, #8
 800336a:	d10b      	bne.n	8003384 <_printf_i+0x148>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	07de      	lsls	r6, r3, #31
 8003370:	d508      	bpl.n	8003384 <_printf_i+0x148>
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	6861      	ldr	r1, [r4, #4]
 8003376:	4299      	cmp	r1, r3
 8003378:	bfde      	ittt	le
 800337a:	2330      	movle	r3, #48	; 0x30
 800337c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003384:	1b52      	subs	r2, r2, r5
 8003386:	6122      	str	r2, [r4, #16]
 8003388:	f8cd a000 	str.w	sl, [sp]
 800338c:	464b      	mov	r3, r9
 800338e:	aa03      	add	r2, sp, #12
 8003390:	4621      	mov	r1, r4
 8003392:	4640      	mov	r0, r8
 8003394:	f7ff fee4 	bl	8003160 <_printf_common>
 8003398:	3001      	adds	r0, #1
 800339a:	d14a      	bne.n	8003432 <_printf_i+0x1f6>
 800339c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033a0:	b004      	add	sp, #16
 80033a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	f043 0320 	orr.w	r3, r3, #32
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	4833      	ldr	r0, [pc, #204]	; (800347c <_printf_i+0x240>)
 80033b0:	2778      	movs	r7, #120	; 0x78
 80033b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	6829      	ldr	r1, [r5, #0]
 80033ba:	061f      	lsls	r7, r3, #24
 80033bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80033c0:	d402      	bmi.n	80033c8 <_printf_i+0x18c>
 80033c2:	065f      	lsls	r7, r3, #25
 80033c4:	bf48      	it	mi
 80033c6:	b2b6      	uxthmi	r6, r6
 80033c8:	07df      	lsls	r7, r3, #31
 80033ca:	bf48      	it	mi
 80033cc:	f043 0320 	orrmi.w	r3, r3, #32
 80033d0:	6029      	str	r1, [r5, #0]
 80033d2:	bf48      	it	mi
 80033d4:	6023      	strmi	r3, [r4, #0]
 80033d6:	b91e      	cbnz	r6, 80033e0 <_printf_i+0x1a4>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	f023 0320 	bic.w	r3, r3, #32
 80033de:	6023      	str	r3, [r4, #0]
 80033e0:	2310      	movs	r3, #16
 80033e2:	e7a7      	b.n	8003334 <_printf_i+0xf8>
 80033e4:	4824      	ldr	r0, [pc, #144]	; (8003478 <_printf_i+0x23c>)
 80033e6:	e7e4      	b.n	80033b2 <_printf_i+0x176>
 80033e8:	4615      	mov	r5, r2
 80033ea:	e7bd      	b.n	8003368 <_printf_i+0x12c>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	6826      	ldr	r6, [r4, #0]
 80033f0:	6961      	ldr	r1, [r4, #20]
 80033f2:	1d18      	adds	r0, r3, #4
 80033f4:	6028      	str	r0, [r5, #0]
 80033f6:	0635      	lsls	r5, r6, #24
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	d501      	bpl.n	8003400 <_printf_i+0x1c4>
 80033fc:	6019      	str	r1, [r3, #0]
 80033fe:	e002      	b.n	8003406 <_printf_i+0x1ca>
 8003400:	0670      	lsls	r0, r6, #25
 8003402:	d5fb      	bpl.n	80033fc <_printf_i+0x1c0>
 8003404:	8019      	strh	r1, [r3, #0]
 8003406:	2300      	movs	r3, #0
 8003408:	6123      	str	r3, [r4, #16]
 800340a:	4615      	mov	r5, r2
 800340c:	e7bc      	b.n	8003388 <_printf_i+0x14c>
 800340e:	682b      	ldr	r3, [r5, #0]
 8003410:	1d1a      	adds	r2, r3, #4
 8003412:	602a      	str	r2, [r5, #0]
 8003414:	681d      	ldr	r5, [r3, #0]
 8003416:	6862      	ldr	r2, [r4, #4]
 8003418:	2100      	movs	r1, #0
 800341a:	4628      	mov	r0, r5
 800341c:	f7fc fef8 	bl	8000210 <memchr>
 8003420:	b108      	cbz	r0, 8003426 <_printf_i+0x1ea>
 8003422:	1b40      	subs	r0, r0, r5
 8003424:	6060      	str	r0, [r4, #4]
 8003426:	6863      	ldr	r3, [r4, #4]
 8003428:	6123      	str	r3, [r4, #16]
 800342a:	2300      	movs	r3, #0
 800342c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003430:	e7aa      	b.n	8003388 <_printf_i+0x14c>
 8003432:	6923      	ldr	r3, [r4, #16]
 8003434:	462a      	mov	r2, r5
 8003436:	4649      	mov	r1, r9
 8003438:	4640      	mov	r0, r8
 800343a:	47d0      	blx	sl
 800343c:	3001      	adds	r0, #1
 800343e:	d0ad      	beq.n	800339c <_printf_i+0x160>
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	079b      	lsls	r3, r3, #30
 8003444:	d413      	bmi.n	800346e <_printf_i+0x232>
 8003446:	68e0      	ldr	r0, [r4, #12]
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	4298      	cmp	r0, r3
 800344c:	bfb8      	it	lt
 800344e:	4618      	movlt	r0, r3
 8003450:	e7a6      	b.n	80033a0 <_printf_i+0x164>
 8003452:	2301      	movs	r3, #1
 8003454:	4632      	mov	r2, r6
 8003456:	4649      	mov	r1, r9
 8003458:	4640      	mov	r0, r8
 800345a:	47d0      	blx	sl
 800345c:	3001      	adds	r0, #1
 800345e:	d09d      	beq.n	800339c <_printf_i+0x160>
 8003460:	3501      	adds	r5, #1
 8003462:	68e3      	ldr	r3, [r4, #12]
 8003464:	9903      	ldr	r1, [sp, #12]
 8003466:	1a5b      	subs	r3, r3, r1
 8003468:	42ab      	cmp	r3, r5
 800346a:	dcf2      	bgt.n	8003452 <_printf_i+0x216>
 800346c:	e7eb      	b.n	8003446 <_printf_i+0x20a>
 800346e:	2500      	movs	r5, #0
 8003470:	f104 0619 	add.w	r6, r4, #25
 8003474:	e7f5      	b.n	8003462 <_printf_i+0x226>
 8003476:	bf00      	nop
 8003478:	08003bb5 	.word	0x08003bb5
 800347c:	08003bc6 	.word	0x08003bc6

08003480 <memmove>:
 8003480:	4288      	cmp	r0, r1
 8003482:	b510      	push	{r4, lr}
 8003484:	eb01 0402 	add.w	r4, r1, r2
 8003488:	d902      	bls.n	8003490 <memmove+0x10>
 800348a:	4284      	cmp	r4, r0
 800348c:	4623      	mov	r3, r4
 800348e:	d807      	bhi.n	80034a0 <memmove+0x20>
 8003490:	1e43      	subs	r3, r0, #1
 8003492:	42a1      	cmp	r1, r4
 8003494:	d008      	beq.n	80034a8 <memmove+0x28>
 8003496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800349a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800349e:	e7f8      	b.n	8003492 <memmove+0x12>
 80034a0:	4402      	add	r2, r0
 80034a2:	4601      	mov	r1, r0
 80034a4:	428a      	cmp	r2, r1
 80034a6:	d100      	bne.n	80034aa <memmove+0x2a>
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034b2:	e7f7      	b.n	80034a4 <memmove+0x24>

080034b4 <_sbrk_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4d06      	ldr	r5, [pc, #24]	; (80034d0 <_sbrk_r+0x1c>)
 80034b8:	2300      	movs	r3, #0
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	f7fe f8c6 	bl	8001650 <_sbrk>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d102      	bne.n	80034ce <_sbrk_r+0x1a>
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	b103      	cbz	r3, 80034ce <_sbrk_r+0x1a>
 80034cc:	6023      	str	r3, [r4, #0]
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
 80034d0:	2000039c 	.word	0x2000039c

080034d4 <memcpy>:
 80034d4:	440a      	add	r2, r1
 80034d6:	4291      	cmp	r1, r2
 80034d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80034dc:	d100      	bne.n	80034e0 <memcpy+0xc>
 80034de:	4770      	bx	lr
 80034e0:	b510      	push	{r4, lr}
 80034e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034ea:	4291      	cmp	r1, r2
 80034ec:	d1f9      	bne.n	80034e2 <memcpy+0xe>
 80034ee:	bd10      	pop	{r4, pc}

080034f0 <_realloc_r>:
 80034f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f4:	4680      	mov	r8, r0
 80034f6:	4614      	mov	r4, r2
 80034f8:	460e      	mov	r6, r1
 80034fa:	b921      	cbnz	r1, 8003506 <_realloc_r+0x16>
 80034fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003500:	4611      	mov	r1, r2
 8003502:	f7ff bc49 	b.w	8002d98 <_malloc_r>
 8003506:	b92a      	cbnz	r2, 8003514 <_realloc_r+0x24>
 8003508:	f7ff fbda 	bl	8002cc0 <_free_r>
 800350c:	4625      	mov	r5, r4
 800350e:	4628      	mov	r0, r5
 8003510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003514:	f000 f81b 	bl	800354e <_malloc_usable_size_r>
 8003518:	4284      	cmp	r4, r0
 800351a:	4607      	mov	r7, r0
 800351c:	d802      	bhi.n	8003524 <_realloc_r+0x34>
 800351e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003522:	d812      	bhi.n	800354a <_realloc_r+0x5a>
 8003524:	4621      	mov	r1, r4
 8003526:	4640      	mov	r0, r8
 8003528:	f7ff fc36 	bl	8002d98 <_malloc_r>
 800352c:	4605      	mov	r5, r0
 800352e:	2800      	cmp	r0, #0
 8003530:	d0ed      	beq.n	800350e <_realloc_r+0x1e>
 8003532:	42bc      	cmp	r4, r7
 8003534:	4622      	mov	r2, r4
 8003536:	4631      	mov	r1, r6
 8003538:	bf28      	it	cs
 800353a:	463a      	movcs	r2, r7
 800353c:	f7ff ffca 	bl	80034d4 <memcpy>
 8003540:	4631      	mov	r1, r6
 8003542:	4640      	mov	r0, r8
 8003544:	f7ff fbbc 	bl	8002cc0 <_free_r>
 8003548:	e7e1      	b.n	800350e <_realloc_r+0x1e>
 800354a:	4635      	mov	r5, r6
 800354c:	e7df      	b.n	800350e <_realloc_r+0x1e>

0800354e <_malloc_usable_size_r>:
 800354e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003552:	1f18      	subs	r0, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	bfbc      	itt	lt
 8003558:	580b      	ldrlt	r3, [r1, r0]
 800355a:	18c0      	addlt	r0, r0, r3
 800355c:	4770      	bx	lr
	...

08003560 <_init>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	bf00      	nop
 8003564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003566:	bc08      	pop	{r3}
 8003568:	469e      	mov	lr, r3
 800356a:	4770      	bx	lr

0800356c <_fini>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr
